using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace ConsoleApplication2
{
  class B
  {
    public int X { get; set; }
    protected int myField = 2;
    protected static readonly int myStatic = 1;
    protected static void S() { }
  }

  class A : B
  {
    public string P { get; set; }

    public void Foo(|int bbb|(0))
    {
      const int aaa = 0;
      int cc = 2 + 2;
      Action f = () |=>|(1)
      {
        S();
        Console.WriteLine(aaa);
        Console.WriteLine(cc);
        Console.WriteLine(bbb + 1);
        Console.WriteLine("sdsd {0}", |123|(2));

        |var s|(3) = |1|(4) |+|(5) "sdsds";
        Action g = |delegate|(6) {
          Console.WriteLine(s);
          Console.WriteLine(s |+|(7) "!");
        };

        foreach (var x |in|(8) Enumerable.Range(0, 100))
          Console.WriteLine(x);

        this.Foo(bbb + 2);

        Console.WriteLine(myField);
        Console.WriteLine(myStatic);
        Foo(2);
        g();

        base.X = 1;
        P = s;
      };
    }
  }
}
---------------------------------------------------------
(0): ReSharper Heap Allocation: Heap allocation: closure instantiation ('bbb' parameter, 'cc' variable and 'this' reference)
(1): ReSharper Heap Allocation: Heap allocation: delegate instantiation (capture of 'bbb' parameter, 'cc' variable and 'this' reference)
(2): ReSharper Boxing Occurance: Boxing: implicit conversion from value type 'int' to reference type 'object'
(3): ReSharper Heap Allocation: Heap allocation: closure instantiation ('s' variable)
(4): ReSharper Boxing Occurance: Boxing: implicit conversion from value type 'int' to reference type 'object'
(5): ReSharper Heap Allocation: Heap allocation: string concatenation
(6): ReSharper Heap Allocation: Heap allocation: delegate instantiation (capture of 's' variable)
(7): ReSharper Heap Allocation: Heap allocation: string concatenation
(8): ReSharper Heap Allocation: Heap allocation: possible enumerator allocation (except iterators and collection with cached enumerator)
