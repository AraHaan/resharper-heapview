using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;

// ReSharper disable TooWideLocalVariableScope
// ReSharper disable UnusedVariable
// ReSharper disable UnusedAutoPropertyAccessor.Local
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedParameter.Local
// ReSharper disable UnusedMember.Local
// ReSharper disable MemberCanBeMadeStatic.Local
// ReSharper disable ConvertToLambdaExpression

class Closures
{
  public void M2()
  {
    |var i|(0) = I;
    var xs = XS;
    var t1 = from x in xs
             |select|(1) i + 123; // closure
    var t2 = from x in xs
             select x + 123; // nothing
    var t3 = from x in xs
             from y |in|(2) xs // closure
             |select|(3) i;    // closure
    var t4 = from x in xs
             from y in XS  // nothing
             select y + x; // nothing
    var t5 = from x in xs
             from |y|(4) in XS // anonymous type
             from z in YS // nothing
             select x + y + z;
    var t6 = from x in xs
             |let|(5) |y|(6) = 123 + i  // anonymous + closure
             from z in XS // nothing
             select x + y + z; // nothing
    var t7 = from x in xs
             from |y|(7) in XS // anonymous type
             where x > 0  // nothing
             select x + y; // nothing
    var t8 = from x in xs
             from |y|(8) in XS // anonymous type
             from |z|(9) in YS // anonymous type
             from w in YS
             select x + y + z;
  }
  
  public void M3()
  {
    |var i|(10) = I;
    var t1 = from x in XS
             from |y|(11) in XS // anonymous type
             from |z|(12) in XS // anonymous type
             where x > 0
             select x + z;
    var t2 = from x in XS
             from y |in|(13) YS.Concat(t1)
             select x into y
             |select|(14) y + i;
    var t3 = from x in XS
             group x |by|(15) x / 10 + i;
    var t4 = from x in XS
             |group|(16) x + i by x / 10;
    var t5 = from x in XS
             group x by x / 10 into g
             |select|(17) g.Key + i;
    var t6 = from x in XS
             join y in YS |on|(18) x + i |equals|(19) y + i
             |select|(20) x + y + i;
    var t7 = from x in XS
             join y in YS |on|(21) x + i equals y
             into z select x;
  
    var t8 = from x in XS select (
               from y in YS select y);
    var t9 = from x in XS |select|(22) (
               from y in YS.Concat(t7)
               |select|(23) y + x + 123);
  }

  public void M4()
  {
    |int i|(24) = I, j = I;
    F(() |=>|(25) M() + X);
    F(() |=>|(26) M() + X + i);
    F(() |=>|(27) X + j);
  }

  public void M5()
  {
    |var i|(28) = I;
    F(() |=>|(29) i);

    {
      |var j|(30) = I;
      F(() |=>|(31) j);
    }
  }

  public void M6()
  {
    |var i|(32) = I;
    F(() |=>|(33) i);

    var j = I;
    F(() |=>|(34) j);
  }

  public void M7()
  {
    F(() |=>|(35)
    {
      M();
      |var i|(36) = I;
      F(() |=>|(37) i);
    });
  }

  public void M8(bool b)
  {
    |int a|(38);
    Console.WriteLine();
    if (b)
    {
      a = I;
      F(() |=>|(39) a);
      F(() |=>|(40) a);
    }
  }

  public void M9(bool t)
  {
    if (t)
    {
      |var a|(41) = I;
      F(() |=>|(42) a);
      F(() |=>|(43) a);
    }
    else
    {
      int z = I, b = I;
      F(() |=>|(44) b);
      F(() |=>|(45) b);
    }
  }

  public void M10(bool t)
  {
    if (t)
    {
      |var a|(46) = I;
      F(() |=>|(47) a);

      {
        |var c|(48) = I;
        F(() |=>|(49) a + c);

        var d = I;
        F(() |=>|(50) a + d);
      }
    }
    else
    {
      |var b|(51) = I;
      F(() |=>|(52) b);
      F(() |=>|(53) b);
    }
  }

  public void M11(int |arg|(54))
  {
    F(() |=>|(55)
    {
      F(|delegate|(56)(|int u|(57))
      {
        F(t |=>|(58) arg + t + u);
      });
    });
  }

  public void M12()
  {
    |var i|(59) = I;
    {
      |var j|(60) = I;
      {
        F(() |=>|(61)
        {
          M();
          return i + j;
        });
      }
    }
  }

  public void M13()
  {
    F(() |=>|(62)
    {
      F(() |=>|(63)
      {
        M();
        M();
      });
    });
  }

  public void M14<T>()
  {
    F(() ||=>|(64)|(65) { });

    var xs = from x in XS
             ||where|(66)|(67) x > 0
             ||group|(68)|(69) x + 1 ||by|(70)|(71) x + 2
             into x // should not be highlighted
             join |y|(72) in YS ||on|(73)|(74) x.Key ||equals|(75)|(76) y
             ||let|(77)|(78) |t|(79) = 1
             ||select|(80)|(81) y + t;
  }

  public void M15(int |arg|(82))
  {
    var y = F(() |=>|(83) X + arg);
    F(z |=>|(84) y);
  }

  public Action M16
  {
    get
    {
      return () |=>|(85) {
        var x = X;
      };
    }
    |set|(86)
    {
      F(() |=>|(87) value);
    }
  }

  public Action this[||int i|(88)|(89)]
  {
    get
    {
      return () |=>|(90)
        F(() |=>|(91) X + i);
    }
    set
    {
      var y = F(() |=>|(92) X + i);
      F(z |=>|(93) y);
    }
  }

  private Action<int>
    f = |x|(94) =>
    {

      F(() |=>|(95) x);
    },
    g = |x|(96) =>
    {
      F(() |=>|(97) x);
    };

  private Action<int, int, int>
    tt = (x, |y|(98), z) =>
    {
      F(() |=>|(99) y);
    };

  private IEnumerable<int> xsss = from x in Enumerable.Range(0, 100)
                                  where x < 0
                                  select F(() |=>|(100) x);

  public void M17(int |arg|(101))
  {
    Expression<Func<int, int>> e = x |=>|(102) x;

    var xs = Enumerable.Range(0, 10).AsQueryable();
    var ys = from x in xs
             |where|(103) x > 0
             |select|(104) x + 1;

    Expression<Func<int>> f = () |=>|(105) arg;
    Expression<Action<int>> g = |t|(106) |=>|(107) F(() |=>|(108) t + arg);
    Expression<Func<int, int>> u = t |=>|(109) 1;
  }

  private static int I { get; set; }
  private int X { get; set; }
  private static List<int> XS { get; set; }
  private static List<int> YS { get; set; }
  private int M() { return 0; }
  private static void F(Action f) { }
  private static int F<T>(Func<T> f) { return 0; }
  private static void F(Action<int> f) { }
  private static void F(Func<int, int> f) { }
}
---------------------------------------------------------
(0): ReSharper HeapView Allocation: Closure allocation: 'i', 'xs' variables
(1): ReSharper HeapView Allocation: Delegate allocation: capture of 'i' variable
(2): ReSharper HeapView Allocation: Delegate allocation: capture of 'xs' variable
(3): ReSharper HeapView Allocation: Delegate allocation: capture of 'i' variable
(4): ReSharper HeapView Allocation: Object allocation: transparent identifier anonymous type instantiation
(5): ReSharper HeapView Allocation: Delegate allocation: capture of 'i' variable
(6): ReSharper HeapView Allocation: Object allocation: transparent identifier anonymous type instantiation
(7): ReSharper HeapView Allocation: Object allocation: transparent identifier anonymous type instantiation
(8): ReSharper HeapView Allocation: Object allocation: transparent identifier anonymous type instantiation
(9): ReSharper HeapView Allocation: Object allocation: transparent identifier anonymous type instantiation
(10): ReSharper HeapView Allocation: Closure allocation: 'i', 't1', 't7' variables
(11): ReSharper HeapView Allocation: Object allocation: transparent identifier anonymous type instantiation
(12): ReSharper HeapView Allocation: Object allocation: transparent identifier anonymous type instantiation
(13): ReSharper HeapView Allocation: Delegate allocation: capture of 't1' variable
(14): ReSharper HeapView Allocation: Delegate allocation: capture of 'i' variable
(15): ReSharper HeapView Allocation: Delegate allocation: capture of 'i' variable
(16): ReSharper HeapView Allocation: Delegate allocation: capture of 'i' variable
(17): ReSharper HeapView Allocation: Delegate allocation: capture of 'i' variable
(18): ReSharper HeapView Allocation: Delegate allocation: capture of 'i' variable
(19): ReSharper HeapView Allocation: Delegate allocation: capture of 'i' variable
(20): ReSharper HeapView Allocation: Delegate allocation: capture of 'i' variable
(21): ReSharper HeapView Allocation: Delegate allocation: capture of 'i' variable
(22): ReSharper HeapView Allocation: Delegate allocation: capture of 't7' variable
(23): ReSharper HeapView Allocation: Delegate allocation: capture of 'x' parameter
(24): ReSharper HeapView Allocation: Closure allocation: 'i', 'j' variables and 'this' reference
(25): ReSharper HeapView Allocation: Delegate allocation: capture of 'this' reference
(26): ReSharper HeapView Allocation: Delegate allocation: capture of 'i' variable and 'this' reference
(27): ReSharper HeapView Allocation: Delegate allocation: capture of 'j' variable and 'this' reference
(28): ReSharper HeapView Allocation: Closure allocation: 'i' variable
(29): ReSharper HeapView Allocation: Delegate allocation: capture of 'i' variable
(30): ReSharper HeapView Allocation: Closure allocation: 'j' variable
(31): ReSharper HeapView Allocation: Delegate allocation: capture of 'j' variable
(32): ReSharper HeapView Allocation: Closure allocation: 'i', 'j' variables
(33): ReSharper HeapView Allocation: Delegate allocation: capture of 'i' variable
(34): ReSharper HeapView Allocation: Delegate allocation: capture of 'j' variable
(35): ReSharper HeapView Allocation: Delegate allocation: capture of 'this' reference
(36): ReSharper HeapView Allocation: Closure allocation: 'i' variable
(37): ReSharper HeapView Allocation: Delegate allocation: capture of 'i' variable
(38): ReSharper HeapView Allocation: Closure allocation: 'a' variable
(39): ReSharper HeapView Allocation: Delegate allocation: capture of 'a' variable
(40): ReSharper HeapView Allocation: Delegate allocation: capture of 'a' variable
(41): ReSharper HeapView Allocation: Closure allocation: 'a' variable
(42): ReSharper HeapView Allocation: Delegate allocation: capture of 'a' variable
(43): ReSharper HeapView Allocation: Delegate allocation: capture of 'a' variable
(44): ReSharper HeapView Allocation: Delegate allocation: capture of 'b' variable
(45): ReSharper HeapView Allocation: Delegate allocation: capture of 'b' variable
(46): ReSharper HeapView Allocation: Closure allocation: 'a' variable
(47): ReSharper HeapView Allocation: Delegate allocation: capture of 'a' variable
(48): ReSharper HeapView Allocation: Closure allocation: 'c', 'd' variables + (outer closure of 'a' variable)
(49): ReSharper HeapView Allocation: Delegate allocation: capture of 'a', 'c' variables
(50): ReSharper HeapView Allocation: Delegate allocation: capture of 'a', 'd' variables
(51): ReSharper HeapView Allocation: Closure allocation: 'b' variable
(52): ReSharper HeapView Allocation: Delegate allocation: capture of 'b' variable
(53): ReSharper HeapView Allocation: Delegate allocation: capture of 'b' variable
(54): ReSharper HeapView Allocation: Closure allocation: 'arg' parameter
(55): ReSharper HeapView Allocation: Delegate allocation: capture of 'arg' parameter
(56): ReSharper HeapView Allocation: Delegate allocation: capture of 'arg' parameter
(57): ReSharper HeapView Allocation: Closure allocation: 'u' parameter + (outer closure of 'arg' parameter)
(58): ReSharper HeapView Allocation: Delegate allocation: capture of 'arg', 'u' parameters
(59): ReSharper HeapView Allocation: Closure allocation: 'i' variable and 'this' reference
(60): ReSharper HeapView Allocation: Closure allocation: 'j' variable + (outer closure of 'i' variable and 'this' reference)
(61): ReSharper HeapView Allocation: Delegate allocation: capture of 'i', 'j' variables and 'this' reference
(62): ReSharper HeapView Allocation: Delegate allocation: capture of 'this' reference
(63): ReSharper HeapView Allocation: Delegate allocation: capture of 'this' reference
(64): ReSharper HeapView Allocation: Delegate allocation: from generic anonymous function (always non cached)
(65): ReSharper Error Highlighting: Slow delegate creation: anonymous function in generic method is generic itself
(66): ReSharper HeapView Allocation: Delegate allocation: from generic anonymous function (always non cached)
(67): ReSharper Error Highlighting: Slow delegate creation: anonymous function in generic method is generic itself
(68): ReSharper HeapView Allocation: Delegate allocation: from generic anonymous function (always non cached)
(69): ReSharper Error Highlighting: Slow delegate creation: anonymous function in generic method is generic itself
(70): ReSharper HeapView Allocation: Delegate allocation: from generic anonymous function (always non cached)
(71): ReSharper Error Highlighting: Slow delegate creation: anonymous function in generic method is generic itself
(72): ReSharper HeapView Allocation: Object allocation: transparent identifier anonymous type instantiation
(73): ReSharper HeapView Allocation: Delegate allocation: from generic anonymous function (always non cached)
(74): ReSharper Error Highlighting: Slow delegate creation: anonymous function in generic method is generic itself
(75): ReSharper HeapView Allocation: Delegate allocation: from generic anonymous function (always non cached)
(76): ReSharper Error Highlighting: Slow delegate creation: anonymous function in generic method is generic itself
(77): ReSharper HeapView Allocation: Delegate allocation: from generic anonymous function (always non cached)
(78): ReSharper Error Highlighting: Slow delegate creation: anonymous function in generic method is generic itself
(79): ReSharper HeapView Allocation: Object allocation: transparent identifier anonymous type instantiation
(80): ReSharper HeapView Allocation: Delegate allocation: from generic anonymous function (always non cached)
(81): ReSharper Error Highlighting: Slow delegate creation: anonymous function in generic method is generic itself
(82): ReSharper HeapView Allocation: Closure allocation: 'arg' parameter, 'y' variable and 'this' reference
(83): ReSharper HeapView Allocation: Delegate allocation: capture of 'arg' parameter and 'this' reference
(84): ReSharper HeapView Allocation: Delegate allocation: capture of 'y' variable
(85): ReSharper HeapView Allocation: Delegate allocation: capture of 'this' reference
(86): ReSharper HeapView Allocation: Closure allocation: 'value' parameter
(87): ReSharper HeapView Allocation: Delegate allocation: capture of 'value' parameter
(88): ReSharper HeapView Allocation: Closure allocation: 'i' parameter and 'this' reference
(89): ReSharper HeapView Allocation: Closure allocation: 'i' parameter, 'y' variable and 'this' reference
(90): ReSharper HeapView Allocation: Delegate allocation: capture of 'i' parameter and 'this' reference
(91): ReSharper HeapView Allocation: Delegate allocation: capture of 'i' parameter and 'this' reference
(92): ReSharper HeapView Allocation: Delegate allocation: capture of 'i' parameter and 'this' reference
(93): ReSharper HeapView Allocation: Delegate allocation: capture of 'y' variable
(94): ReSharper HeapView Allocation: Closure allocation: 'x' parameter
(95): ReSharper HeapView Allocation: Delegate allocation: capture of 'x' parameter
(96): ReSharper HeapView Allocation: Closure allocation: 'x' parameter
(97): ReSharper HeapView Allocation: Delegate allocation: capture of 'x' parameter
(98): ReSharper HeapView Allocation: Closure allocation: 'y' parameter
(99): ReSharper HeapView Allocation: Delegate allocation: capture of 'y' parameter
(100): ReSharper HeapView Allocation: Delegate allocation: capture of 'x' parameter
(101): ReSharper HeapView Allocation: Closure allocation: 'arg' parameter
(102): ReSharper HeapView Allocation: Object allocation: expression tree construction
(103): ReSharper HeapView Allocation: Object allocation: expression tree construction
(104): ReSharper HeapView Allocation: Object allocation: expression tree construction
(105): ReSharper HeapView Allocation: Object allocation: expression tree construction
(106): ReSharper HeapView Allocation: Closure allocation: 't' parameter + (outer closure of 'arg' parameter)
(107): ReSharper HeapView Allocation: Object allocation: expression tree construction
(108): ReSharper HeapView Allocation: Delegate allocation: capture of 'arg', 't' parameters
(109): ReSharper HeapView Allocation: Object allocation: expression tree construction
