using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Threading;

// ReSharper disable UnusedTypeParameter
// ReSharper disable ClassNeverInstantiated.Local
// ReSharper disable CheckNamespace
// ReSharper disable InconsistentNaming

internal interface IBar
{
  object BooVirt();
  object BooVirt<U>();
}

class Bar : IBar
{
  public static object Foo() { return null; }
  public static object Foo<U>() { return null; }
  public object Boo() { return null; }
  public object Boo<U>() { return null; }
  public virtual object BooVirt() { return null; }
  public virtual object BooVirt<U>() { return null; }
  public static void Baz<U>(U a) { }
  public void Baz2<U>(U a) { }
}

internal interface IBar<T>
{
  object BooVirt();
}

class Bar<T> : IBar<T>
{
  public static object Foo() { return null; }
  public object Boo() { return null; }
  public virtual object BooVirt() { return null; }
}

class Program
{
  static void Measure(Action action)
  {
    Thread.CurrentThread.Priority = ThreadPriority.Highest;

    action();

    var sw = Stopwatch.StartNew();
    for (var i = 0; i < COUNT; i++) action();

    Console.WriteLine("{0} => {1}", |ourIndex++|(0), sw.|Elapsed|(1));
    Thread.CurrentThread.Priority = ThreadPriority.Normal;
  }

  const int COUNT = 1000000;
  static int ourIndex = 1;

  static readonly Bar simpleBar = |new|(2) Bar();
  static readonly Bar<int> genericBarOfInt = |new|(3) Bar<int>();
  static readonly Bar<string> genericBarOfString = |new|(4) Bar<string>();
  static readonly IBar simpleIface = simpleBar;
  static readonly IBar<int> genericIfaceOfInt = genericBarOfInt;
  static readonly IBar<string> genericIfaceOfString = genericBarOfString;

  public static void Main()
  {
    // delegates from static methods
    Measure(() => PassMeDelegate(Bar.|Foo|(5)));          // 1
    Measure(() => PassMeDelegate(Bar.|Foo|(6)<int>));     // 2
    Measure(() => PassMeDelegate(Bar.|Foo|(7)<string>));  // 3
    Measure(() => PassMeDelegate(Bar.|Foo|(8)<string>));  // 4
    Measure(() => PassMeDelegate(Bar<int>.|Foo|(9)));     // 5
    Measure(() => PassMeDelegate(Bar<string>.|Foo|(10)));  // 6

    // delegates from instance methods
    Measure(() => PassMeDelegate(simpleBar.|Boo|(11)));               // 7
    Measure(() => PassMeDelegate(simpleBar.|Boo|(12)<int>));          // 8
    Measure(() => PassMeDelegate(simpleBar.|Boo|(13)<string>));       // 9
    Measure(() => PassMeDelegate(simpleBar.|BooVirt|(14)));           // 10
    Measure(() => PassMeDelegate(simpleBar.|BooVirt|(15)<int>));      // 11
    Measure(() => PassMeDelegate(simpleBar.|BooVirt|(16)<string>));   // 12
    Measure(() => PassMeDelegate(genericBarOfInt.|Boo|(17)));         // 13
    Measure(() => PassMeDelegate(genericBarOfString.|Boo|(18)));      // 14
    Measure(() => PassMeDelegate(genericBarOfInt.|BooVirt|(19)));     // 15
    Measure(() => PassMeDelegate(genericBarOfString.|BooVirt|(20)));  // 16

    // delegate from interface members
    Measure(() => PassMeDelegate(simpleIface.||BooVirt|(21)|(22)));           // 17  <--
    Measure(() => PassMeDelegate(simpleIface.||BooVirt|(23)|(24)<int>));      // 18  <--
    Measure(() => PassMeDelegate(simpleIface.||BooVirt|(25)|(26)<string>));   // 19  <--
    Measure(() => PassMeDelegate(genericIfaceOfInt.||BooVirt|(27)|(28)));     // 20  <--
    Measure(() => PassMeDelegate(genericIfaceOfString.||BooVirt|(29)|(30)));  // 21  <--

    // delegates, created from lambdas in a generic method
    Measure(|GenericTest|(31)<int>);     // 22
    Measure(|GenericTest|(32)<string>);  // 23  <--

    // delegates, created from non-generic static method group in a generic type,
    // parametrized with the containing generic method's type parameter
    Measure(|GenericTest2|(33)<int>);     // 24
    Measure(|GenericTest2|(34)<string>);  // 25 <--

    // delegates, created from generic static method group in a non-generic type,
    // parametrized with the containing generic method's type parameter
    Measure(|GenericTest3|(35)<int>);     // 26
    Measure(|GenericTest3|(36)<string>);  // 27 <--

    // delegates, created from generic instance method group in a non-generic type,
    // parametrized with the containing generic method's type parameter
    Measure(|GenericTest4|(37)<int>);     // 28
    Measure(|GenericTest4|(38)<string>);  // 29

    // delegates, created from non-generic static method group in a generic type,
    // parametrized with the containing type type parameter
    Measure(Some<int>.|StaticTest|(39));     // 30
    Measure(Some<string>.|StaticTest|(40));  // 31 <--

    // delegates, created from generic static method group in a non-generic type,
    // parametrized with the containing type type parameter
    Measure(Some<int>.|StaticTest2|(41));     // 32
    Measure(Some<string>.|StaticTest2|(42));  // 33 <--

    // delegates, created from generic instance method group in a non-generic type,
    // parametrized with the containing type type parameter
    Measure(Some<int>.|StaticTest3|(43));     // 34
    Measure(Some<string>.|StaticTest3|(44));  // 35

    var someOfInt = |new|(45) Some<int>();
    var someOfString = |new|(46) Some<int>();

    // delegates, from non-generic static method group in a generic type,
    // parametrized with the containing type type parameter, created in a instance method
    Measure(someOfInt.|InstanceTest|(47));     // 36
    Measure(someOfString.|InstanceTest|(48));  // 37

    // delegates, created from generic static method group in a non-generic type,
    // parametrized with the containing type type parameter, created in a instance method
    Measure(someOfInt.|InstanceTest2|(49));     // 38
    Measure(someOfString.|InstanceTest2|(50));  // 39

    // delegates, created from generic instance method group in a non-generic type,
    // parametrized with the containing type type parameter, created in a instance method
    Measure(someOfInt.|InstanceTest3|(51));     // 40
    Measure(someOfString.|InstanceTest3|(52));  // 41

    // delegates, created from generic static method group in a non-generic type,
    // parametrized with the containing generic method's type parameter, infered from usage
    Measure(|GenericTest5|(53)<int>);     // 42
    Measure(|GenericTest5|(54)<string>);  // 43 <--

    // delegates, created from generic instance method group in a non-generic type,
    // parametrized with the containing generic method's type parameter, infered from usage
    Measure(|GenericTest6|(55)<int>);     // 44
    Measure(|GenericTest6|(56)<string>);  // 45

    // delegates, created from generic static method group in a non-generic type,
    // parametrized with the containing type type parameter, infered from usage
    Measure(Some<int>.|StaticTest4|(57));     // 46
    Measure(Some<string>.|StaticTest4|(58));  // 47 <--

    // delegates, created from generic static method group in a non-generic type,
    // parametrized with the containing type type parameter, infered from usage
    Measure(Some<int>.|StaticTest5|(59));     // 48
    Measure(Some<string>.|StaticTest5|(60));  // 49

    // delegates, created from generic static method group in a non-generic type,
    // parametrized with the containing type type parameter,
    // infered from usage and created in a instance method
    Measure(someOfInt.|InstanceTest4|(61));     // 50
    Measure(someOfString.|InstanceTest4|(62));  // 51

    // delegates, created from generic instance method group in a non-generic type,
    // parametrized with the containing type type parameter,
    // infered from usage and created in a instance method
    Measure(someOfInt.|InstanceTest5|(63));     // 52
    Measure(someOfString.|InstanceTest5|(64));  // 53

    // delegates, created from non-generic static method group in a generic type,
    // parametrized with the containing type type parameter (hidden by implicit qualifier)
    Measure(Some<int>.|StaticTest6|(65));           // 54
    Measure(Some<string>.|StaticTest6|(66));        // 55 <--
    Measure(Some<int>.Other.|StaticTest8|(67));     // 56
    Measure(Some<string>.Other.|StaticTest8|(68));  // 57 <--
    Measure(someOfInt.|InstanceTest6|(69));         // 58
    Measure(someOfString.|InstanceTest6|(70));      // 59

    var otherOfInt = |new|(71) Some<int>.Other();
    var otherOfString = |new|(72) Some<string>.Other();
    Measure(otherOfInt.|InstanceTest8|(73));        // 60
    Measure(otherOfString.|InstanceTest8|(74));     // 61 <-- ????

    // delegates, created from non-generic static method group in a generic type,
    // parameterized with some other type, parametrized with the containing type type parameter
    Measure(Some<int>.|StaticTest7|(75));     // 62
    Measure(Some<string>.|StaticTest7|(76));  // 63
  }

  // lags only if T is a reference type (but not at x64)
  static void GenericTest<T>() { PassMeDelegate(() ||=>|(77)|(78) typeof(T)); }  // <--
  static void GenericTest2<T>() { PassMeDelegate(Bar<T>.||Foo|(79)|(80)); }       // <--
  static void GenericTest3<T>() { PassMeDelegate(Bar.||Foo|(81)|(82)<T>); }       // <--

  // do not lags (instance vtbl helps to resolve method)
  static void GenericTest4<T>() { PassMeDelegate(simpleBar.|Boo|(83)<T>); }

  // infered type parameters
  static void GenericTest5<T>() { PassMeGenericDelegate<T>(Bar.||Baz|(84)|(85)); } // <--
  static void GenericTest6<T>() { PassMeGenericDelegate<T>(simpleBar.|Baz2|(86)); }

  sealed class Some<T>
  {
    public static void StaticTest() { PassMeDelegate(Bar<T>.||Foo|(87)|(88)); } // <--
    public static void StaticTest2() { PassMeDelegate(Bar.||Foo|(89)|(90)<T>); } // <--
    public static void StaticTest3() { PassMeDelegate(simpleBar.|Boo|(91)<T>); }
    public static void StaticTest4() { PassMeGenericDelegate<T>(Bar.||Baz|(92)|(93)); } // <--
    public static void StaticTest5() { PassMeGenericDelegate<T>(simpleBar.|Baz2|(94)); }
    public static void StaticTest6() { PassMeDelegate(||Booo|(95)|(96)); } // <-- (hidden type parameter)
    public static void StaticTest7() { PassMeDelegate(Bar<Action<T>>.||Foo|(97)|(98)); } // <--

    // do not lags at all (the same vtbl help)
    public void InstanceTest() { PassMeDelegate(Bar<T>.|Foo|(99)); }
    public void InstanceTest2() { PassMeDelegate(Bar.|Foo|(100)<T>); }
    public void InstanceTest3() { PassMeDelegate(simpleBar.|Boo|(101)<T>); }
    public void InstanceTest4() { PassMeGenericDelegate<T>(Bar.|Baz|(102)); }
    public void InstanceTest5() { PassMeGenericDelegate<T>(simpleBar.|Baz2|(103)); }
    public void InstanceTest6() { PassMeDelegate(|Booo|(104)); }

    // even more hidden type parameter
    public class Other
    {
      public static void StaticTest8() { PassMeDelegate(||Booo2|(105)|(106)); } // <--
      public void InstanceTest8() { PassMeDelegate(||Booo2|(107)|(108)); } // <-- !!!!!!! because this method is static_by_T_type_parameter
      private static object Booo2() { return null; }
    }

    private static object Booo() { return null; }
  }

  delegate object SomeFunc();
  [MethodImpl(MethodImplOptions.NoInlining)]
  static void PassMeDelegate(SomeFunc action) { GC.KeepAlive(action); }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void PassMeGenericDelegate<U>(Action<U> action) { GC.KeepAlive(action); }
}
---------------------------------------------------------
(0): ReSharper HeapView Boxing: Boxing allocation: conversion from value type 'int' to reference type 'object'
(1): ReSharper HeapView Boxing: Boxing allocation: conversion from value type 'TimeSpan' to reference type 'object'
(2): ReSharper HeapView Allocation: Object allocation: reference type creation
(3): ReSharper HeapView Allocation: Object allocation: reference type creation
(4): ReSharper HeapView Allocation: Object allocation: reference type creation
(5): ReSharper HeapView Allocation: Delegate allocation: from method group
(6): ReSharper HeapView Allocation: Delegate allocation: from method group
(7): ReSharper HeapView Allocation: Delegate allocation: from method group
(8): ReSharper HeapView Allocation: Delegate allocation: from method group
(9): ReSharper HeapView Allocation: Delegate allocation: from method group
(10): ReSharper HeapView Allocation: Delegate allocation: from method group
(11): ReSharper HeapView Allocation: Delegate allocation: from method group
(12): ReSharper HeapView Allocation: Delegate allocation: from method group
(13): ReSharper HeapView Allocation: Delegate allocation: from method group
(14): ReSharper HeapView Allocation: Delegate allocation: from method group
(15): ReSharper HeapView Allocation: Delegate allocation: from method group
(16): ReSharper HeapView Allocation: Delegate allocation: from method group
(17): ReSharper HeapView Allocation: Delegate allocation: from method group
(18): ReSharper HeapView Allocation: Delegate allocation: from method group
(19): ReSharper HeapView Allocation: Delegate allocation: from method group
(20): ReSharper HeapView Allocation: Delegate allocation: from method group
(21): ReSharper HeapView Allocation: Delegate allocation: from method group
(22): ReSharper Error Highlighting: Slow delegate creation: from interface 'IBar' method
(23): ReSharper HeapView Allocation: Delegate allocation: from method group
(24): ReSharper Error Highlighting: Slow delegate creation: from interface 'IBar' method
(25): ReSharper HeapView Allocation: Delegate allocation: from method group
(26): ReSharper Error Highlighting: Slow delegate creation: from interface 'IBar' method
(27): ReSharper HeapView Allocation: Delegate allocation: from method group
(28): ReSharper Error Highlighting: Slow delegate creation: from interface 'IBar' method
(29): ReSharper HeapView Allocation: Delegate allocation: from method group
(30): ReSharper Error Highlighting: Slow delegate creation: from interface 'IBar' method
(31): ReSharper HeapView Allocation: Delegate allocation: from method group
(32): ReSharper HeapView Allocation: Delegate allocation: from method group
(33): ReSharper HeapView Allocation: Delegate allocation: from method group
(34): ReSharper HeapView Allocation: Delegate allocation: from method group
(35): ReSharper HeapView Allocation: Delegate allocation: from method group
(36): ReSharper HeapView Allocation: Delegate allocation: from method group
(37): ReSharper HeapView Allocation: Delegate allocation: from method group
(38): ReSharper HeapView Allocation: Delegate allocation: from method group
(39): ReSharper HeapView Allocation: Delegate allocation: from method group
(40): ReSharper HeapView Allocation: Delegate allocation: from method group
(41): ReSharper HeapView Allocation: Delegate allocation: from method group
(42): ReSharper HeapView Allocation: Delegate allocation: from method group
(43): ReSharper HeapView Allocation: Delegate allocation: from method group
(44): ReSharper HeapView Allocation: Delegate allocation: from method group
(45): ReSharper HeapView Allocation: Object allocation: reference type creation
(46): ReSharper HeapView Allocation: Object allocation: reference type creation
(47): ReSharper HeapView Allocation: Delegate allocation: from method group
(48): ReSharper HeapView Allocation: Delegate allocation: from method group
(49): ReSharper HeapView Allocation: Delegate allocation: from method group
(50): ReSharper HeapView Allocation: Delegate allocation: from method group
(51): ReSharper HeapView Allocation: Delegate allocation: from method group
(52): ReSharper HeapView Allocation: Delegate allocation: from method group
(53): ReSharper HeapView Allocation: Delegate allocation: from method group
(54): ReSharper HeapView Allocation: Delegate allocation: from method group
(55): ReSharper HeapView Allocation: Delegate allocation: from method group
(56): ReSharper HeapView Allocation: Delegate allocation: from method group
(57): ReSharper HeapView Allocation: Delegate allocation: from method group
(58): ReSharper HeapView Allocation: Delegate allocation: from method group
(59): ReSharper HeapView Allocation: Delegate allocation: from method group
(60): ReSharper HeapView Allocation: Delegate allocation: from method group
(61): ReSharper HeapView Allocation: Delegate allocation: from method group
(62): ReSharper HeapView Allocation: Delegate allocation: from method group
(63): ReSharper HeapView Allocation: Delegate allocation: from method group
(64): ReSharper HeapView Allocation: Delegate allocation: from method group
(65): ReSharper HeapView Allocation: Delegate allocation: from method group
(66): ReSharper HeapView Allocation: Delegate allocation: from method group
(67): ReSharper HeapView Allocation: Delegate allocation: from method group
(68): ReSharper HeapView Allocation: Delegate allocation: from method group
(69): ReSharper HeapView Allocation: Delegate allocation: from method group
(70): ReSharper HeapView Allocation: Delegate allocation: from method group
(71): ReSharper HeapView Allocation: Object allocation: reference type creation
(72): ReSharper HeapView Allocation: Object allocation: reference type creation
(73): ReSharper HeapView Allocation: Delegate allocation: from method group
(74): ReSharper HeapView Allocation: Delegate allocation: from method group
(75): ReSharper HeapView Allocation: Delegate allocation: from method group
(76): ReSharper HeapView Allocation: Delegate allocation: from method group
(77): ReSharper HeapView Allocation: Delegate allocation: from generic anonymous function (always non cached)
(78): ReSharper Error Highlighting: Slow delegate creation: anonymous function in generic method is generic itself
(79): ReSharper HeapView Allocation: Delegate allocation: from method group
(80): ReSharper Error Highlighting: Slow delegate creation: method group parametrized with type parameter 'T' of method 'GenericTest2'
(81): ReSharper HeapView Allocation: Delegate allocation: from method group
(82): ReSharper Error Highlighting: Slow delegate creation: method group parametrized with type parameter 'T' of method 'GenericTest3'
(83): ReSharper HeapView Allocation: Delegate allocation: from method group
(84): ReSharper HeapView Allocation: Delegate allocation: from method group
(85): ReSharper Error Highlighting: Slow delegate creation: method group parametrized with type parameter 'T' of method 'GenericTest5'
(86): ReSharper HeapView Allocation: Delegate allocation: from method group
(87): ReSharper HeapView Allocation: Delegate allocation: from method group
(88): ReSharper Error Highlighting: Slow delegate creation: method group parametrized with type parameter 'T' of type 'Some'
(89): ReSharper HeapView Allocation: Delegate allocation: from method group
(90): ReSharper Error Highlighting: Slow delegate creation: method group parametrized with type parameter 'T' of type 'Some'
(91): ReSharper HeapView Allocation: Delegate allocation: from method group
(92): ReSharper HeapView Allocation: Delegate allocation: from method group
(93): ReSharper Error Highlighting: Slow delegate creation: method group parametrized with type parameter 'T' of type 'Some'
(94): ReSharper HeapView Allocation: Delegate allocation: from method group
(95): ReSharper HeapView Allocation: Delegate allocation: from method group
(96): ReSharper Error Highlighting: Slow delegate creation: method group parametrized with type parameter 'T' of type 'Some'
(97): ReSharper HeapView Allocation: Delegate allocation: from method group
(98): ReSharper Error Highlighting: Slow delegate creation: method group parametrized with type parameter 'T' of type 'Some'
(99): ReSharper HeapView Allocation: Delegate allocation: from method group
(100): ReSharper HeapView Allocation: Delegate allocation: from method group
(101): ReSharper HeapView Allocation: Delegate allocation: from method group
(102): ReSharper HeapView Allocation: Delegate allocation: from method group
(103): ReSharper HeapView Allocation: Delegate allocation: from method group
(104): ReSharper HeapView Allocation: Delegate allocation: from method group
(105): ReSharper HeapView Allocation: Delegate allocation: from method group
(106): ReSharper Error Highlighting: Slow delegate creation: method group parametrized with type parameter 'T' of type 'Some'
(107): ReSharper HeapView Allocation: Delegate allocation: from method group
(108): ReSharper Error Highlighting: Slow delegate creation: method group parametrized with type parameter 'T' of type 'Some'
