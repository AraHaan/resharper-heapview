Owner: constructor 'Base.Base(Func<int> func)'

========
Owner: record 'R'
Closures:
> lambda expression 'int () => X + Y + 1'
    Captures:
    > parameter 'X'
    > parameter 'Y'
> lambda expression 'int () => X + Y + 2'
    Captures:
    > parameter 'X'
    > parameter 'Y'
> lambda expression 'int () => x + X'
    Captures:
    > local variable 'x'
    > parameter 'X'
> lambda expression 'int () => 3'
> lambda expression 'int () => StaticMember1 + x'
    Captures:
    > local variable 'x'
Display classes:
  Display class #1
    Scope: IRecordDeclaration 'record R(int X, int Y) : Base(() => X + ...'
    Members:
    > parameter 'X'
    > parameter 'Y'
    Closures:
    > lambda expression 'int () => X + Y + 1'
    > lambda expression 'int () => X + Y + 2'
  Display class #2
    Scope: IExpressionInitializer 'X is var x && F(() => x + X)'
    Members:
    > local variable 'x'
    > display class #1
    Closures:
    > lambda expression 'int () => x + X'
  Display class #3
    Scope: IExpressionInitializer 'StaticMember1 is var x && F(() => Static...'
    Members:
    > local variable 'x'
    Closures:
    > lambda expression 'int () => StaticMember1 + x'

========
Owner: method 'bool R.F(Func<int> f)'

========
