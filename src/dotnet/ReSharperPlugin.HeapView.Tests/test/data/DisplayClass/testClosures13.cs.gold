Owner: method 'void Closures.M9(bool t)'
Closures:
> lambda expression 'int () => a + 1'
    Captures:
    > local variable 'a'
> lambda expression 'int () => a + 2'
    Captures:
    > local variable 'a'
> lambda expression 'int () => b + 1'
    Captures:
    > local variable 'b'
> lambda expression 'int () => b + 2'
    Captures:
    > local variable 'b'
Display classes:
  Display class #1
    Scope: IBlock '{ var a = I; F(() => a + 1); F(() => a +...'
    Members:
    > local variable 'a'
    Closures:
    > lambda expression 'int () => a + 1'
    > lambda expression 'int () => a + 2'
  Display class #2
    Scope: IBlock '{ int z = I, b = I; F(() => b + 1); F(()...'
    Members:
    > local variable 'b'
    Closures:
    > lambda expression 'int () => b + 1'
    > lambda expression 'int () => b + 2'

========
Owner: method 'int Closures.F<T>(Func<T> f)'

========
