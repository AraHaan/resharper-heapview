using System.Collections.Generic;
// ReSharper disable RedundantExplicitParamsArrayCreation

|ParamsEnumerable|(0)<int>(); // no Array.Empty<T>()
ParamsEnumerable<int>(|[]|(1)); // no Array.Empty<T>()
ParamsEnumerable(|1|(2));
ParamsEnumerable(|[1]|(3));
ParamsEnumerable(|1|(4), 2, 3);
ParamsEnumerable(|[|(5)1, 2, 3]);
ParamsEnumerable("abc");
ParamsEnumerable(|["a|(6)bc"]);
ParamsEnumerable(|new|(7) List<string> { "aa" });
ParamsEnumerable(|"abc"|(8), args[0]);
ParamsEnumerable(|["a|(9)bc", args[0]]);
return;

void ParamsEnumerable<T>(params IEnumerable<T> xs)
{
  _ = xs;
}
---------------------------------------------------------
(0): ReSharper HeapView Allocation: Object allocation: new array and 'IEnumerable<int>' implementation instance creation for params parameter 'xs'
(1): ReSharper HeapView Allocation: Object allocation: new array and 'IEnumerable<int>' implementation instance creation
(2): ReSharper HeapView Allocation: Object allocation: new 'IEnumerable<int>' implementation instance creation for params parameter 'xs'
(3): ReSharper HeapView Allocation: Object allocation: new 'IEnumerable<int>' implementation instance creation
(4): ReSharper HeapView Allocation: Object allocation: new array and 'IEnumerable<int>' implementation instance creation for params parameter 'xs'
(5): ReSharper HeapView Allocation: Object allocation: new array and 'IEnumerable<int>' implementation instance creation
(6): ReSharper HeapView Allocation: Object allocation: new 'IEnumerable<string>' implementation instance creation
(7): ReSharper HeapView Allocation: Object allocation: new 'List<string>' instance creation
(8): ReSharper HeapView Allocation: Object allocation: new array and 'IEnumerable<string>' implementation instance creation for params parameter 'xs'
(9): ReSharper HeapView Allocation: Object allocation: new array and 'IEnumerable<string>' implementation instance creation
