using System.Collections.Generic;

int[] empty1 = [];
string[] empty2 = [];

int[] array1 = |[11|(0)1, 222];
string[] array2 = |["a|(1)", "b"];

int[] array3 = |[|(2)..array1];
string[] array4 = |[|(3)..args];

int[] array5 = |[|(4)..array1, 1];
string[] array6 = |[|(5)..args, "222"];

IEnumerable<string> ys = args;
string[] array7 = |[|(6)|..|(7)ys];
string[] array8 = |[|(8)|..|(9)ys, "aaa"];
---------------------------------------------------------
(0): ReSharper HeapView Allocation: Object allocation: new 'int[]' array instance creation
(1): ReSharper HeapView Allocation: Object allocation: new 'string[]' array instance creation
(2): ReSharper HeapView Allocation: Object allocation: new 'int[]' array instance creation
(3): ReSharper HeapView Allocation: Object allocation: new 'string[]' array instance creation
(4): ReSharper HeapView Allocation: Object allocation: new 'int[]' array instance creation
(5): ReSharper HeapView Allocation: Object allocation: new 'string[]' array instance creation
(6): ReSharper HeapView Allocation: Object allocation: new temporary list and possible (if not empty) 'string[]' array instance creation
(7): ReSharper HeapView Allocation: Possible object allocation: new 'IEnumerator<string>' instance creation on 'GetEnumerator()' call (except when it's cached by the implementation)
(8): ReSharper HeapView Allocation: Object allocation: new temporary list and 'string[]' array instance creation
(9): ReSharper HeapView Allocation: Possible object allocation: new 'IEnumerator<string>' instance creation on 'GetEnumerator()' call (except when it's cached by the implementation)
