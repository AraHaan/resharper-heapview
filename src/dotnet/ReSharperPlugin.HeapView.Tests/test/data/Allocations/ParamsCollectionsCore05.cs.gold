using System.Collections.Generic;
// ReSharper disable RedundantExplicitParamsArrayCreation

|ParamsList|(0)<int>();
ParamsList<int>(|[]|(1));
ParamsList(|1|(2));
ParamsList(|[1]|(3));
ParamsList(|1|(4), 2, 3);
ParamsList(|[|(5)1, 2, 3]);
ParamsList(|"abc"|(6));
ParamsList(|["a|(7)bc"]);
//ParamsList(new List<string>(args));
ParamsList(|"abc"|(8), args[0]);
ParamsList(|["a|(9)bc", args[0]]);
return;

void ParamsList<T>(params List<T> xs)
{
  _ = xs;
}

void Generics<T>(params T x) where T : IAddable<int>, new()
{
  T xs1 = |[]|(10);
  T xs2 = |[1]|(11);
  |Generics|(12)<T>();
  Generics<T>(|1|(13));
}

interface IAddable<T> : IEnumerable<T>
{
  void Add(T t);
}
---------------------------------------------------------
(0): ReSharper HeapView Allocation: Object allocation: new 'List<int>' instance creation for params parameter 'xs'
(1): ReSharper HeapView Allocation: Object allocation: new 'List<int>' instance creation
(2): ReSharper HeapView Allocation: Object allocation: new 'List<int>' instance creation for params parameter 'xs'
(3): ReSharper HeapView Allocation: Object allocation: new 'List<int>' instance creation
(4): ReSharper HeapView Allocation: Object allocation: new 'List<int>' instance creation for params parameter 'xs'
(5): ReSharper HeapView Allocation: Object allocation: new 'List<int>' instance creation
(6): ReSharper HeapView Allocation: Object allocation: new 'List<string>' instance creation for params parameter 'xs'
(7): ReSharper HeapView Allocation: Object allocation: new 'List<string>' instance creation
(8): ReSharper HeapView Allocation: Object allocation: new 'List<string>' instance creation for params parameter 'xs'
(9): ReSharper HeapView Allocation: Object allocation: new 'List<string>' instance creation
(10): ReSharper HeapView Allocation: Possible object allocation: new instance creation if 'T' type parameter will be substituted with the reference type
(11): ReSharper HeapView Allocation: Possible object allocation: new instance creation if 'T' type parameter will be substituted with the reference type
(12): ReSharper HeapView Allocation: Possible object allocation: new instance creation if 'T' type parameter will be substituted with the reference type, for params parameter 'x'
(13): ReSharper HeapView Allocation: Possible object allocation: new instance creation if 'T' type parameter will be substituted with the reference type, for params parameter 'x'
