// ReSharper disable UnusedVariable

class ArrayInitializers
{
  public int[] Array01 |= {|(0) 1, 2, 3 }; // yes
  public int[] Array02 |= {|(1) }, // yes
               Array03 |= {|(2) 0, 0, 0 }; // yes
  public int[] Array04 { get; } |= {|(3) }; // yes
  public int[,] Array05 |= {|(4) { 1, 2 }, { 3, 4 } }; // yes, outer
  public Unresolved Array06 = { };
  public Unresolved[] Array07 |= {|(5) }; // yes
  public string[] Array08 =
  |{|(6)
    "only",
    "brace",
    "highlighted"
  };

  public void Method(int x)
  {
    if (x == 42)
    {
      string[] xs = { "aaa", "bbb" };
      throw new System.Exception();
    }

    string[] ys |= {|(7) "aaa", "bbb" }; // yes
  }
}
---------------------------------------------------------
(0):<overlapped> ReSharper HeapView Allocation: Object allocation: new 'int[]' array instance creation
(1):<overlapped> ReSharper HeapView Allocation: Object allocation: new 'int[]' array instance creation
(2):<overlapped> ReSharper HeapView Allocation: Object allocation: new 'int[]' array instance creation
(3):<overlapped> ReSharper HeapView Allocation: Object allocation: new 'int[]' array instance creation
(4): ReSharper HeapView Allocation: Object allocation: new 'int[,]' array instance creation
(5): ReSharper HeapView Allocation: Object allocation: new 'Unresolved[]' array instance creation
(6):<overlapped> ReSharper HeapView Allocation: Object allocation: new 'string[]' array instance creation
(7):<overlapped> ReSharper HeapView Allocation: Object allocation: new 'string[]' array instance creation
