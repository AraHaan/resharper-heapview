using System.Collections.Generic;

// bound
{
  IList<string> list = |[|(0)..args];
  ICollection<string> collection = |[|(1)..args];

  IReadOnlyList<string> readOnlyList = |[|(2)..args];
  IReadOnlyCollection<string> readOnlyCollection = |[|(3)..args];
  IEnumerable<string> enumerable = |[|(4)..args];
}

// unbound
{
  IEnumerable<string> xs = args;
    
  IList<string> list = |[|(5)|..|(6)xs];
  ICollection<string> collection = |[|(7)|..|(8)xs];

  IReadOnlyList<string> readOnlyList = |[|(9)|..|(10)xs];
  IReadOnlyCollection<string> readOnlyCollection = |[|(11)|..|(12)xs];
  IEnumerable<string> enumerable = |[|(13)|..|(14)xs];
}
---------------------------------------------------------
(0): ReSharper HeapView Allocation: Object allocation: new 'List<string>' instance creation
(1): ReSharper HeapView Allocation: Object allocation: new 'List<string>' instance creation
(2): ReSharper HeapView Allocation: Object allocation: new array and 'IReadOnlyList<string>' implementation instance creation
(3): ReSharper HeapView Allocation: Object allocation: new array and 'IReadOnlyCollection<string>' implementation instance creation
(4): ReSharper HeapView Allocation: Object allocation: new array and 'IEnumerable<string>' implementation instance creation
(5): ReSharper HeapView Allocation: Object allocation: new 'List<string>' instance creation
(6): ReSharper HeapView Allocation: Possible object allocation: new 'IEnumerator<string>' instance creation on 'GetEnumerator()' call (except when it's cached by the implementation)
(7): ReSharper HeapView Allocation: Object allocation: new 'List<string>' instance creation
(8): ReSharper HeapView Allocation: Possible object allocation: new 'IEnumerator<string>' instance creation on 'GetEnumerator()' call (except when it's cached by the implementation)
(9): ReSharper HeapView Allocation: Object allocation: new temporary list and 'IReadOnlyList<string>' implementation instance creation
(10): ReSharper HeapView Allocation: Possible object allocation: new 'IEnumerator<string>' instance creation on 'GetEnumerator()' call (except when it's cached by the implementation)
(11): ReSharper HeapView Allocation: Object allocation: new temporary list and 'IReadOnlyCollection<string>' implementation instance creation
(12): ReSharper HeapView Allocation: Possible object allocation: new 'IEnumerator<string>' instance creation on 'GetEnumerator()' call (except when it's cached by the implementation)
(13): ReSharper HeapView Allocation: Object allocation: new temporary list and 'IEnumerable<string>' implementation instance creation
(14): ReSharper HeapView Allocation: Possible object allocation: new 'IEnumerator<string>' instance creation on 'GetEnumerator()' call (except when it's cached by the implementation)
