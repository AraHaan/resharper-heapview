using System.Collections.Generic;

{
  // new List<T> { x }
  IList<int> list = |[1]|(0);
  ICollection<int> collection = |[2]|(1);

  // new Wrapper(new[] { x })
  IReadOnlyList<int> readOnlyList = |[3]|(2);
  IReadOnlyCollection<int> readOnlyCollection = |[4]|(3);
  IEnumerable<int> enumerable = |[5]|(4);
}

{
  // new List<T>
  IList<int> list = |[]|(5);
  ICollection<int> collection = |[]|(6);

  // Array.Empty<T>
  IReadOnlyList<int> readOnlyList = [];
  IReadOnlyCollection<int> readOnlyCollection = [];
  IEnumerable<int> enumerable = [];
}
---------------------------------------------------------
(0): ReSharper HeapView Allocation: Object allocation: new 'List<int>' instance creation
(1): ReSharper HeapView Allocation: Object allocation: new 'List<int>' instance creation
(2): ReSharper HeapView Allocation: Object allocation: new array and 'IReadOnlyList<int>' implementation instance creation
(3): ReSharper HeapView Allocation: Object allocation: new array and 'IReadOnlyCollection<int>' implementation instance creation
(4): ReSharper HeapView Allocation: Object allocation: new array and 'IEnumerable<int>' implementation instance creation
(5): ReSharper HeapView Allocation: Object allocation: new 'List<int>' instance creation
(6): ReSharper HeapView Allocation: Object allocation: new 'List<int>' instance creation
