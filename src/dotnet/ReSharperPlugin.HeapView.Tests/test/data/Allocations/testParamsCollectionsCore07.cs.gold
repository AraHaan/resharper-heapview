using System.Collections.Generic;
// ReSharper disable RedundantExplicitParamsArrayCreation

ParamsReadOnlyList<int>();
ParamsReadOnlyList<int>([]);
ParamsReadOnlyList(|1|(0));
ParamsReadOnlyList(|[1]|(1));
ParamsReadOnlyList(|1|(2), 2, 3);
ParamsReadOnlyList(|[|(3)1, 2, 3]);
ParamsReadOnlyList(|"abc"|(4));
ParamsReadOnlyList(|["a|(5)bc"]);
ParamsReadOnlyList(|new|(6) List<string> { "aa" });
ParamsReadOnlyList(|"abc"|(7), args[0]);
ParamsReadOnlyList(|["a|(8)bc", args[0]]);
return;

void ParamsReadOnlyList<T>(params IReadOnlyList<T> xs)
{
  _ = xs;
}
---------------------------------------------------------
(0): ReSharper HeapView Allocation: Object allocation: new 'IReadOnlyList<int>' implementation instance creation for params parameter 'xs'
(1): ReSharper HeapView Allocation: Object allocation: new 'IReadOnlyList<int>' implementation instance creation
(2): ReSharper HeapView Allocation: Object allocation: new array and 'IReadOnlyList<int>' implementation instance creation for params parameter 'xs'
(3): ReSharper HeapView Allocation: Object allocation: new array and 'IReadOnlyList<int>' implementation instance creation
(4): ReSharper HeapView Allocation: Object allocation: new 'IReadOnlyList<string>' implementation instance creation for params parameter 'xs'
(5): ReSharper HeapView Allocation: Object allocation: new 'IReadOnlyList<string>' implementation instance creation
(6): ReSharper HeapView Allocation: Object allocation: new 'List<string>' instance creation
(7): ReSharper HeapView Allocation: Object allocation: new array and 'IReadOnlyList<string>' implementation instance creation for params parameter 'xs'
(8): ReSharper HeapView Allocation: Object allocation: new array and 'IReadOnlyList<string>' implementation instance creation
