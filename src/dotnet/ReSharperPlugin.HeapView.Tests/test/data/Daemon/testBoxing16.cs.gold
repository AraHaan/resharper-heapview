interface I {
  int Prop { get; set; }
  void Method();
  int this[int index] { get; set; }
}

struct S : I {
  public int Prop { get; set; }
  public void Method() { }
  public int this[int index] { get => 0; set { } }
    
  public void M<T, U>(S s, T t, U u) where T : struct {
    ((|I|(0)) s).Prop += 42;
    ((|I|(1)) t).Prop = 424;
    _ = ((|I|(2)) u).Prop;

    ((|I|(3)) s).Method();
    ((|I|(4)) t).Method();
    ((|I|(5)) u).Method();

    ((|I|(6)) s)[42] += 123;
    ((|I|(7)) t)[42] += 123;
    ((|I|(8)) u)[42] += 123;

    System.GC.KeepAlive((|I|(9)) s); // box
  }
}
---------------------------------------------------------
(0): ReSharper HeapView Boxing: Boxing allocation: conversion from 'S' to 'I' requires boxing of the value type
(1): ReSharper HeapView Boxing: Boxing allocation: conversion from 'T' to 'I' requires boxing of the value type
(2): ReSharper HeapView Boxing: Possible boxing allocation: conversion from 'U' to 'I' possibly requires boxing of the value type
(3): ReSharper HeapView Boxing: Boxing allocation: conversion from 'S' to 'I' requires boxing of the value type
(4): ReSharper HeapView Boxing: Boxing allocation: conversion from 'T' to 'I' requires boxing of the value type
(5): ReSharper HeapView Boxing: Possible boxing allocation: conversion from 'U' to 'I' possibly requires boxing of the value type
(6): ReSharper HeapView Boxing: Boxing allocation: conversion from 'S' to 'I' requires boxing of the value type
(7): ReSharper HeapView Boxing: Boxing allocation: conversion from 'T' to 'I' requires boxing of the value type
(8): ReSharper HeapView Boxing: Possible boxing allocation: conversion from 'U' to 'I' possibly requires boxing of the value type
(9): ReSharper HeapView Boxing: Boxing allocation: conversion from 'S' to 'I' requires boxing of the value type
