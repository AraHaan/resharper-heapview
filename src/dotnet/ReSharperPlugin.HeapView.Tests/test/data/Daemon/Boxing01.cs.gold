// ReSharper disable ReturnValueOfPureMethodIsNotUsed
// ReSharper disable CheckNamespace
// ReSharper disable UnusedVariable
// ReSharper disable UnusedParameter.Global
// ReSharper disable ConvertToConstant.Local
// ReSharper disable UnusedMember.Local
// ReSharper disable RedundantBaseQualifier
// ReSharper disable RedundantThisQualifier

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace ConsoleApplication2
{
  internal class Program
  {
    private static void Main(string[] args)
    {
      var o = |new|(0) {Foo = |new|(1) {Bar = 123}};

      object a = |123|(2);
      object b = o.Foo.|Bar|(3);
      string s = "sdsdsdsds" |+|(4) |1|(5);

      var foo = |new|(6) Foo();
      var bar = |new|(7) Bar();

      foreach (var x |in|(8) foo) Console.WriteLine(x);
      foreach (var x |in|(9) bar) Console.WriteLine(x);
      foreach (var x in (dynamic) foo) Console.WriteLine(x);

      var s1 = new S1();
      var s2 = new S2();

      foreach (var x in |s1|(10)) Console.WriteLine(x);
      foreach (var x |in|(11) s2) Console.WriteLine(x);

      |s1|(12).Select(x => x + 1)
        .Where(x => x > 0)
        .Select(x => |new|(13)[] { x })
        .ToList()
        .ForEach(_ => { });

    }
  }

  public class Foo : IEnumerable<int>
  {
    public IEnumerator<int> GetEnumerator()
    {
      yield return 1;
      //return new Enumerator();
    }

    public struct Enumerator
    {
      private bool flag;
      public int Current { get { return 1; } }
      public bool MoveNext() { flag = false; return !flag; }
    }

    IEnumerator<int> IEnumerable<int>.GetEnumerator()
    {
      yield return 2;
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
      yield return |3|(14);
    }
  }

  public class Bar : Foo { }

  public struct S1 : IEnumerable<int>
  {
    IEnumerator<int> IEnumerable<int>.GetEnumerator()
    {
      yield return 1;
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
      yield return |2|(15);
    }
  }

  public struct S2
  {
    public IEnumerator<int> GetEnumerator()
    {
      yield return 1;
    }
  }
}

---------------------------------------------------------
(0): ReSharper HeapView Allocation: Object allocation: reference type instantiation
(1): ReSharper HeapView Allocation: Object allocation: reference type instantiation
(2): ReSharper HeapView Boxing: Boxing allocation: conversion from value type 'int' to reference type 'object'
(3): ReSharper HeapView Boxing: Boxing allocation: conversion from value type 'int' to reference type 'object'
(4): ReSharper HeapView Allocation: Object allocation: string concatenation
(5): ReSharper HeapView Boxing: Boxing allocation: conversion from value type 'int' to reference type 'object'
(6): ReSharper HeapView Allocation: Object allocation: reference type creation
(7): ReSharper HeapView Allocation: Object allocation: reference type creation
(8): ReSharper HeapView Allocation: Possible object allocation: enumerator allocation (except iterators or collection with cached enumerator)
(9): ReSharper HeapView Allocation: Possible object allocation: enumerator allocation (except iterators or collection with cached enumerator)
(10): ReSharper HeapView Boxing: Boxing allocation: conversion from value type 'S1' to reference type 'IEnumerable'
(11): ReSharper HeapView Allocation: Possible object allocation: enumerator allocation (except iterators or collection with cached enumerator)
(12): ReSharper HeapView Boxing: Boxing allocation: conversion from value type 'S1' to reference type 'IEnumerable<int>'
(13): ReSharper HeapView Allocation: Object allocation: array creation
(14): ReSharper HeapView Boxing: Boxing allocation: conversion from value type 'int' to reference type 'object'
(15): ReSharper HeapView Boxing: Boxing allocation: conversion from value type 'int' to reference type 'object'
