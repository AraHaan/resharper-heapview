using System;

interface I { int P { get; } }
interface I2 { }

struct S : I {
  public int P => 42;

  public void M(S s) {
    // all statically known, no boxing
    if (s is object) { }
    if (s is ValueType) { }
    if (s is ValueType _) { }
    if (s is I { }) { }
    if (s is I) { }
    if (s is I2) { }
    if (s is int) { }

    // boxing
    if (s is |object|(0) o) { }
    if (s is |ValueType|(1) v) { }
    if (s is |I|(2) i) { }
    if (s is |I|(3) { P: 42 }) { }
    if ((s, s) is (I _, |I|(4) { } u)) { }
  }

  public void G<T>(T t) {
    // possible boxing in .net fw
    if (t is object) { }
    if (t is ValueType _) { }
    if (t is ValueType) { }
    if (t is I { }) { }
    if (t is I) { }
    if (t is I2) { }
    if (t is int) { }

    // possible boxing
    if (t is |object|(5) o) { }
    if (t is |ValueType|(6) v) { }
    if (t is |Enum|(7) e) { }
    if (t is |I|(8) i) { }
    if (t is |I|(9) { P: 42 }) { }
    if ((t, t) is (I _, |I|(10) { } u)) { }
    if (t is int x) { }
  }

  public void V<T>(T t) where T : struct {
    // definite boxing in .net fw
    if (t is object) { }
    if (t is ValueType) { }
    if (t is ValueType _) { }
    if (t is I) { }
    if (t is I { } _) { }
    if (t is I2 { }) { }
    if (t is int) { }

    var ss = t switch { I _ => 1, I2 _ => 2, _ => -1 };

    // definite boxing
    if (t is |object|(11) o) { }
    if (t is |ValueType|(12) v) { }
    if (t is |Enum|(13) e) { }
    if (t is |I|(14) i) { }
    if (t is |I|(15) { P: 42 }) { }
    if ((t, t) is (I _, |I|(16) { } u)) { }
    if (t is int x) { }
  }
}
---------------------------------------------------------
(0): ReSharper HeapView Boxing: Boxing allocation: type testing 'S' value for 'object' type and using the result requires boxing of the value type
(1): ReSharper HeapView Boxing: Boxing allocation: type testing 'S' value for 'ValueType' type and using the result requires boxing of the value type
(2): ReSharper HeapView Boxing: Boxing allocation: type testing 'S' value for 'I' type and using the result requires boxing of the value type
(3): ReSharper HeapView Boxing: Boxing allocation: type testing 'S' value for 'I' type and using the result requires boxing of the value type
(4): ReSharper HeapView Boxing: Boxing allocation: type testing 'S' value for 'I' type and using the result requires boxing of the value type
(5): ReSharper HeapView Boxing: Possible boxing allocation: type testing 'T' value for 'object' type and using the result possibly requires boxing of the value type
(6): ReSharper HeapView Boxing: Possible boxing allocation: type testing 'T' value for 'ValueType' type and using the result possibly requires boxing of the value type
(7): ReSharper HeapView Boxing: Possible boxing allocation: type testing 'T' value for 'Enum' type and using the result possibly requires boxing of the value type
(8): ReSharper HeapView Boxing: Possible boxing allocation: type testing 'T' value for 'I' type and using the result possibly requires boxing of the value type
(9): ReSharper HeapView Boxing: Possible boxing allocation: type testing 'T' value for 'I' type and using the result possibly requires boxing of the value type
(10): ReSharper HeapView Boxing: Possible boxing allocation: type testing 'T' value for 'I' type and using the result possibly requires boxing of the value type
(11): ReSharper HeapView Boxing: Boxing allocation: type testing 'T' value for 'object' type and using the result requires boxing of the value type
(12): ReSharper HeapView Boxing: Boxing allocation: type testing 'T' value for 'ValueType' type and using the result requires boxing of the value type
(13): ReSharper HeapView Boxing: Boxing allocation: type testing 'T' value for 'Enum' type and using the result requires boxing of the value type
(14): ReSharper HeapView Boxing: Boxing allocation: type testing 'T' value for 'I' type and using the result requires boxing of the value type
(15): ReSharper HeapView Boxing: Boxing allocation: type testing 'T' value for 'I' type and using the result requires boxing of the value type
(16): ReSharper HeapView Boxing: Boxing allocation: type testing 'T' value for 'I' type and using the result requires boxing of the value type
