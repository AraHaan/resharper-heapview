using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace ConsoleApplication2
{
  class B
  {
    public int X { get; set; }
    protected int myField = 2;
    protected static readonly int myStatic = 1;
    protected static void S() { }
  }

  class A : B
  {
    public string P { get; set; }

    public void Foo(int |bbb|(0))
    {
      const int aaa = 0;
      int cc = 2 + 2;
      Action f = () |=>|(1)
      {
        S();
        Console.WriteLine(aaa);
        Console.WriteLine(cc);
        Console.WriteLine(bbb + 1);
        Console.WriteLine("sdsd {0}", |123|(2));

        var |s|(3) = 1 |+|(4) "sdsds";
        Action g = |delegate|(5) {
          Console.WriteLine(s);
          Console.WriteLine(s |+|(6) "!");
        };

        foreach (var x |in|(7) Enumerable.Range(0, 100))
          Console.WriteLine(x);

        this.Foo(bbb + 2);

        Console.WriteLine(myField);
        Console.WriteLine(myStatic);
        Foo(2);
        g();

        base.X = 1;
        P = s;
      };
    }
  }
}
---------------------------------------------------------
(0): ReSharper HeapView Allocation: Closure allocation: capture of 'bbb' parameter, 'cc' variable and 'this' reference
(1): ReSharper HeapView Allocation: Delegate allocation: new 'Action' instance creation
Capture of parameter 'bbb', variable 'cc' and 'this' reference
(2): ReSharper HeapView Boxing: Boxing allocation: conversion from 'int' to 'object' requires boxing of the value type
(3): ReSharper HeapView Allocation: Closure allocation: capture of 's' variable
(4): ReSharper HeapView Allocation: Object allocation: string concatenation
(5): ReSharper HeapView Allocation: Delegate allocation: new 'Action' instance creation
Capture of variable 's'
(6): ReSharper HeapView Allocation: Object allocation: string concatenation
(7): ReSharper HeapView Allocation: Possible object allocation: enumerator allocation (except iterators or collection with cached enumerator)
