using System;

public struct S {
  void M() {
    Action a = this.||M|(0)|(1), // alloc
           a2 = ||M|(2)|(3); // alloc
    string s = nameof(this.M);
    Action b = this.|E|(4); // error
  }

  void Generic<T>(T t) where T : I {
    Action a = t.||M|(5)|(6); // possible
    string s = nameof(t.M);
    Action b = t.|E2|(7); // error
  }

  void Generic2<T>(T t) where T : class, I {
    Action a = t.|M|(8);
  }

  void Generic3<T>(T t) where T : struct, I {
    Action a = t.||M|(9)|(10); // alloc
  }
}

public static class X {
  public static void E(this S s) { }
  public static void E2<T>(this T t) { }
}

public interface I {
  void M();
}
---------------------------------------------------------
(0): ReSharper HeapView Boxing: Boxing allocation: conversion of value type 'S' instance method to 'Action' delegate type
(1): ReSharper HeapView Allocation: Delegate allocation: from method group
(2): ReSharper HeapView Boxing: Boxing allocation: conversion of value type 'S' instance method to 'Action' delegate type
(3): ReSharper HeapView Allocation: Delegate allocation: from method group
(4): ReSharper HeapView Allocation: Delegate allocation: from method group
(5): ReSharper HeapView Allocation: Delegate allocation: from method group
(6): ReSharper HeapView Boxing: Possible boxing allocation: conversion of value type 'T' instance method to 'Action' delegate type if 'T' type parameter will be substituted with the value type
(7): ReSharper HeapView Allocation: Delegate allocation: from method group
(8): ReSharper HeapView Allocation: Delegate allocation: from method group
(9): ReSharper HeapView Boxing: Boxing allocation: conversion of value type 'T' instance method to 'Action' delegate type
(10): ReSharper HeapView Allocation: Delegate allocation: from method group
