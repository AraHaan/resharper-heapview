using System;

interface I { int P { get; } }
interface I2 { }

struct S : I {
  public int P => 42;

  public void M(S s) {
    // all statically known, no boxing
    if (s is object) { }
    if (s is ValueType) { }
    if (s is ValueType _) { }
    if (s is I { }) { }
    if (s is I) { }
    if (s is I2) { }
    if (s is int) { }

    // boxing
    if (s is |object|(0) o) { }
    if (s is |ValueType|(1) v) { }
    if (s is |I|(2) i) { }
    if (s is |I|(3) { P: 42 }) { }
    if ((s, s) is (I _, |I|(4) { } u)) { }
  }

  public void G<T>(T t) {
    // possible boxing in .net fw
    if (t is |object|(5)) { }
    if (t is |ValueType|(6) _) { }
    if (t is |ValueType|(7)) { }
    if (t is |I|(8) { }) { }
    if (t is |I|(9)) { }
    if (t is |I2|(10)) { }
    if (t is |int|(11)) { }

    // possible boxing
    if (t is |object|(12) o) { }
    if (t is |ValueType|(13) v) { }
    if (t is |Enum|(14) e) { }
    if (t is |I|(15) i) { }
    if (t is |I|(16) { P: 42 }) { }
    if ((t, t) is (|I|(17) _, |I|(18) { } u)) { }
    if (t is |int|(19) x) { }
  }

  public void V<T>(T t) where T : struct {
    // definite boxing in .net fw
    if (t is |object|(20)) { }
    if (t is |ValueType|(21)) { }
    if (t is |ValueType|(22) _) { }
    if (t is |I|(23)) { }
    if (t is |I|(24) { } _) { }
    if (t is |I2|(25) { }) { }
    if (t is |int|(26)) { }

    var ss = t switch { |I|(27) _ => 1, |I2|(28) _ => 2, _ => -1 };

    // definite boxing
    if (t is |object|(29) o) { }
    if (t is |ValueType|(30) v) { }
    if (t is |Enum|(31) e) { }
    if (t is |I|(32) i) { }
    if (t is |I|(33) { P: 42 }) { }
    if ((t, t) is (|I|(34) _, |I|(35) { } u)) { }
    if (t is |int|(36) x) { }
  }
}
---------------------------------------------------------
(0): ReSharper HeapView Boxing: Boxing allocation: type testing 'S' value for 'object' type and using the result requires boxing of the value type
(1): ReSharper HeapView Boxing: Boxing allocation: type testing 'S' value for 'ValueType' type and using the result requires boxing of the value type
(2): ReSharper HeapView Boxing: Boxing allocation: type testing 'S' value for 'I' type and using the result requires boxing of the value type
(3): ReSharper HeapView Boxing: Boxing allocation: type testing 'S' value for 'I' type and using the result requires boxing of the value type
(4): ReSharper HeapView Boxing: Boxing allocation: type testing 'S' value for 'I' type and using the result requires boxing of the value type
(5): ReSharper HeapView Boxing: Possible boxing allocation: type testing 'T' value for 'object' type in .NET Framework projects possibly requires boxing of the value type
(6): ReSharper HeapView Boxing: Possible boxing allocation: type testing 'T' value for 'ValueType' type in .NET Framework projects possibly requires boxing of the value type
(7): ReSharper HeapView Boxing: Possible boxing allocation: type testing 'T' value for 'ValueType' type in .NET Framework projects possibly requires boxing of the value type
(8): ReSharper HeapView Boxing: Possible boxing allocation: type testing 'T' value for 'I' type in .NET Framework projects possibly requires boxing of the value type
(9): ReSharper HeapView Boxing: Possible boxing allocation: type testing 'T' value for 'I' type in .NET Framework projects possibly requires boxing of the value type
(10): ReSharper HeapView Boxing: Possible boxing allocation: type testing 'T' value for 'I2' type in .NET Framework projects possibly requires boxing of the value type
(11): ReSharper HeapView Boxing: Possible boxing allocation: type testing 'T' value for 'int' type in .NET Framework projects possibly requires boxing of the value type
(12): ReSharper HeapView Boxing: Possible boxing allocation: type testing 'T' value for 'object' type in .NET Framework projects possibly requires boxing of the value type
(13): ReSharper HeapView Boxing: Possible boxing allocation: type testing 'T' value for 'ValueType' type in .NET Framework projects possibly requires boxing of the value type
(14): ReSharper HeapView Boxing: Possible boxing allocation: type testing 'T' value for 'Enum' type in .NET Framework projects possibly requires boxing of the value type
(15): ReSharper HeapView Boxing: Possible boxing allocation: type testing 'T' value for 'I' type in .NET Framework projects possibly requires boxing of the value type
(16): ReSharper HeapView Boxing: Possible boxing allocation: type testing 'T' value for 'I' type in .NET Framework projects possibly requires boxing of the value type
(17): ReSharper HeapView Boxing: Possible boxing allocation: type testing 'T' value for 'I' type in .NET Framework projects possibly requires boxing of the value type
(18): ReSharper HeapView Boxing: Possible boxing allocation: type testing 'T' value for 'I' type in .NET Framework projects possibly requires boxing of the value type
(19): ReSharper HeapView Boxing: Possible boxing allocation: type testing 'T' value for 'int' type in .NET Framework projects possibly requires boxing of the value type
(20): ReSharper HeapView Boxing: Boxing allocation: type testing 'T' value for 'object' type in .NET Framework projects requires boxing of the value type
(21): ReSharper HeapView Boxing: Boxing allocation: type testing 'T' value for 'ValueType' type in .NET Framework projects requires boxing of the value type
(22): ReSharper HeapView Boxing: Boxing allocation: type testing 'T' value for 'ValueType' type in .NET Framework projects requires boxing of the value type
(23): ReSharper HeapView Boxing: Boxing allocation: type testing 'T' value for 'I' type in .NET Framework projects requires boxing of the value type
(24): ReSharper HeapView Boxing: Boxing allocation: type testing 'T' value for 'I' type in .NET Framework projects requires boxing of the value type
(25): ReSharper HeapView Boxing: Boxing allocation: type testing 'T' value for 'I2' type in .NET Framework projects requires boxing of the value type
(26): ReSharper HeapView Boxing: Boxing allocation: type testing 'T' value for 'int' type in .NET Framework projects requires boxing of the value type
(27): ReSharper HeapView Boxing: Boxing allocation: type testing 'T' value for 'I' type in .NET Framework projects requires boxing of the value type
(28): ReSharper HeapView Boxing: Boxing allocation: type testing 'T' value for 'I2' type in .NET Framework projects requires boxing of the value type
(29): ReSharper HeapView Boxing: Boxing allocation: type testing 'T' value for 'object' type in .NET Framework projects requires boxing of the value type
(30): ReSharper HeapView Boxing: Boxing allocation: type testing 'T' value for 'ValueType' type in .NET Framework projects requires boxing of the value type
(31): ReSharper HeapView Boxing: Boxing allocation: type testing 'T' value for 'Enum' type in .NET Framework projects requires boxing of the value type
(32): ReSharper HeapView Boxing: Boxing allocation: type testing 'T' value for 'I' type in .NET Framework projects requires boxing of the value type
(33): ReSharper HeapView Boxing: Boxing allocation: type testing 'T' value for 'I' type in .NET Framework projects requires boxing of the value type
(34): ReSharper HeapView Boxing: Boxing allocation: type testing 'T' value for 'I' type in .NET Framework projects requires boxing of the value type
(35): ReSharper HeapView Boxing: Boxing allocation: type testing 'T' value for 'I' type in .NET Framework projects requires boxing of the value type
(36): ReSharper HeapView Boxing: Boxing allocation: type testing 'T' value for 'int' type in .NET Framework projects requires boxing of the value type
