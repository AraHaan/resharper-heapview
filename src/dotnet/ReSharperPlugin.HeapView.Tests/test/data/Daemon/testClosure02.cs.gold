using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;

// ReSharper disable TooWideLocalVariableScope
// ReSharper disable UnusedVariable
// ReSharper disable UnusedAutoPropertyAccessor.Local
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedParameter.Local
// ReSharper disable UnusedMember.Local
// ReSharper disable MemberCanBeMadeStatic.Local
// ReSharper disable ConvertToLambdaExpression

class Closures
{
  public void M2()
  {
    var |i|(0) = I;
    var xs = XS;
    var t1 = from x in xs
             |select|(1) i + 123; // closure
    var t2 = from x in xs
             select x + 123; // nothing
    var t3 = from x in xs
             from y |in|(2) xs // closure
             |select|(3) i;    // closure
    var t4 = from x in xs
             from y in XS  // nothing
             select y + x; // nothing
    var t5 = from x in xs
             from |y|(4) in XS // anonymous type
             from z in YS // nothing
             select x + y + z;
    var t6 = from x in xs
             |let|(5) |y|(6) = 123 + i  // anonymous + closure
             from z in XS // nothing
             select x + y + z; // nothing
    var t7 = from x in xs
             from |y|(7) in XS // anonymous type
             where x > 0  // nothing
             select x + y; // nothing
    var t8 = from x in xs
             from |y|(8) in XS // anonymous type
             from |z|(9) in YS // anonymous type
             from w in YS
             select x + y + z;
  }
  
  public void M3()
  {
    var |i|(10) = I;
    var t1 = from x in XS
             from |y|(11) in XS // anonymous type
             from |z|(12) in XS // anonymous type
             where x > 0
             select x + z;
    var t2 = from x in XS
             from y |in|(13) YS.Concat(t1)
             select x into y
             |select|(14) y + i;
    var t3 = from x in XS
             group x |by|(15) x / 10 + i;
    var t4 = from x in XS
             |group|(16) x + i by x / 10;
    var t5 = from x in XS
             group x by x / 10 into g
             |select|(17) g.Key + i;
    var t6 = from x in XS
             join y in YS |on|(18) x + i |equals|(19) y + i
             |select|(20) x + y + i;
    var t7 = from x in XS
             join y in YS |on|(21) x + i equals y
             into z select x;
  
    var t8 = from x in XS select (
               from y in YS select y);
    var t9 = from |x|(22) in XS |select|(23) (
               from y in YS.Concat(t7)
               |select|(24) y + x + 123);
  }

  public void M4()
  {
    int |i|(25) = I, j = I;
    F(() |=>|(26) M() + X);
    F(() |=>|(27) M() + X + i);
    F(() |=>|(28) X + j);
  }

  public void M5()
  {
    var |i|(29) = I;
    F(() |=>|(30) i);

    {
      var |j|(31) = I;
      F(() |=>|(32) j);
    }
  }

  public void M6()
  {
    var |i|(33) = I;
    F(() |=>|(34) i);

    var j = I;
    F(() |=>|(35) j);
  }

  public void M7()
  {
    F(() |=>|(36)
    {
      M();
      var |i|(37) = I;
      F(() |=>|(38) i);
    });
  }

  public void M8(bool b)
  {
    int |a|(39);
    Console.WriteLine();
    if (b)
    {
      a = I;
      F(() |=>|(40) a);
      F(() |=>|(41) a);
    }
  }

  public void M9(bool t)
  {
    if (t)
    {
      var |a|(42) = I;
      F(() |=>|(43) a);
      F(() |=>|(44) a);
    }
    else
    {
      int z = I, |b|(45) = I;
      F(() |=>|(46) b);
      F(() |=>|(47) b);
    }
  }

  public void M10(bool t)
  {
    if (t)
    {
      var |a|(48) = I;
      F(() |=>|(49) a);

      {
        var |c|(50) = I;
        F(() |=>|(51) a + c);

        var d = I;
        F(() |=>|(52) a + d);
      }
    }
    else
    {
      var |b|(53) = I;
      F(() |=>|(54) b);
      F(() |=>|(55) b);
    }
  }

  public void M11(int |arg|(56))
  {
    F(() =>
    {
      F(delegate(int |u|(57))
      {
        F(t |=>|(58) arg + t + u);
      });
    });
  }

  public void M12()
  {
    var |i|(59) = I;
    {
      var |j|(60) = I;
      {
        F(() |=>|(61)
        {
          M();
          return i + j;
        });
      }
    }
  }

  public void M13()
  {
    F(() =>
    {
      F(() |=>|(62)
      {
        M();
        M();
      });
    });
  }

  public void M14<T>()
  {
    F(() => { });

    var xs = from x in XS
             where x > 0
             group x + 1 by x + 2
             into x // should not be highlighted
             join |y|(63) in YS on x.Key equals y
             let |t|(64) = 1
             select y + t;
  }

  public void M15(int |arg|(65))
  {
    var y = F(() |=>|(66) X + arg);
    F(z |=>|(67) y);
  }

  public Action M16
  {
    get
    {
      return () |=>|(68) {
        var x = X;
      };
    }
    |set|(69)
    {
      F(() |=>|(70) value);
    }
  }

  public Action this[int i]
  {
    |get|(71)
    {
      return () =>
        F(() |=>|(72) X + i);
    }
    |set|(73)
    {
      var y = F(() |=>|(74) X + i);
      F(z |=>|(75) y);
    }
  }

  private Action<int>
    f = |x|(76) =>
    {

      F(() |=>|(77) x);
    },
    g = |x|(78) =>
    {
      F(() |=>|(79) x);
    };

  private Action<int, int, int>
    tt = (x, |y|(80), z) =>
    {
      F(() |=>|(81) y);
    };

  private IEnumerable<int> xsss = from |x|(82) in Enumerable.Range(0, 100)
                                  where x < 0
                                  select F(() |=>|(83) x);

  public void M17(int |arg|(84))
  {
    Expression<Func<int, int>> e = x |=>|(85) x;

    var xs = Enumerable.Range(0, 10).AsQueryable();
    var ys = from x in xs
             |where|(86) x > 0
             |select|(87) x + 1;

    Expression<Func<int>> f = () |=>|(88) arg;
    Expression<Action<int>> g = t |=>|(89) F(() => t + arg);
    Expression<Func<int, int>> u = t |=>|(90) 1;
  }

  private static int I { get; set; }
  private int X { get; set; }
  private static List<int> XS { get; set; }
  private static List<int> YS { get; set; }
  private int M() { return 0; }
  private static void F(Action f) { }
  private static int F<T>(Func<T> f) { return 0; }
  private static void F(Action<int> f) { }
  private static void F(Func<int, int> f) { }
}
---------------------------------------------------------
(0): ReSharper HeapView Allocation: Closure allocation: capture of 'i' variable and 'xs' variable
(1): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int,int>' instance creation
Capture of variable 'i'
Implicit capture of variable 'xs' (can cause memory leaks)
(2): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int,IEnumerable<int>>' instance creation
Capture of variable 'xs'
(3): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int,int,int>' instance creation
Capture of variable 'i'
Implicit capture of variable 'xs' (can cause memory leaks)
(4): ReSharper HeapView Allocation: Object allocation: new anonymous type instance creation for range variables {x, y}
(5): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int,{int x, int y}>' instance creation
Capture of variable 'i'
Implicit capture of variable 'xs' (can cause memory leaks)
(6): ReSharper HeapView Allocation: Object allocation: new anonymous type instance creation for range variables {x, y}
(7): ReSharper HeapView Allocation: Object allocation: new anonymous type instance creation for range variables {x, y}
(8): ReSharper HeapView Allocation: Object allocation: new anonymous type instance creation for range variables {x, y}
(9): ReSharper HeapView Allocation: Object allocation: new anonymous type instance creation for range variables {{x, y}, z}
(10): ReSharper HeapView Allocation: Closure allocation: capture of 'i' variable, 't1' variable and 't7' variable
(11): ReSharper HeapView Allocation: Object allocation: new anonymous type instance creation for range variables {x, y}
(12): ReSharper HeapView Allocation: Object allocation: new anonymous type instance creation for range variables {{x, y}, z}
(13): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int,IEnumerable<int>>' instance creation
Capture of variable 't1'
Implicit capture of variable 't7' (can cause memory leaks)
(14): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int,int>' instance creation
Capture of variable 'i'
Implicit capture of variables 't1' and 't7' (can cause memory leaks)
(15): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int,int>' instance creation
Capture of variable 'i'
Implicit capture of variables 't1' and 't7' (can cause memory leaks)
(16): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int,int>' instance creation
Capture of variable 'i'
Implicit capture of variables 't1' and 't7' (can cause memory leaks)
(17): ReSharper HeapView Allocation: Delegate allocation: new 'Func<IGrouping<int,int>,int>' instance creation
Capture of variable 'i'
Implicit capture of variables 't1' and 't7' (can cause memory leaks)
(18): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int,int>' instance creation
Capture of variable 'i'
Implicit capture of variables 't1' and 't7' (can cause memory leaks)
(19): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int,int>' instance creation
Capture of variable 'i'
Implicit capture of variables 't1' and 't7' (can cause memory leaks)
(20): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int,int,int>' instance creation
Capture of variable 'i'
Implicit capture of variables 't1' and 't7' (can cause memory leaks)
(21): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int,int>' instance creation
Capture of variable 'i'
Implicit capture of variables 't1' and 't7' (can cause memory leaks)
(22): ReSharper HeapView Allocation: Closure allocation: capture of 'x' parameter
(23): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int,IEnumerable<int>>' instance creation
Capture of variable 't7'
Implicit capture of variable 't1' (can cause memory leaks)
(24): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int,int>' instance creation
Capture of parameter 'x'
(25): ReSharper HeapView Allocation: Closure allocation: capture of 'i' variable, 'j' variable and 'this' reference
(26): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int>' instance creation
Capture of 'this' reference
(27): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int>' instance creation
Capture of variable 'i' and 'this' reference
(28): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int>' instance creation
Capture of variable 'j' and 'this' reference
(29): ReSharper HeapView Allocation: Closure allocation: capture of 'i' variable
(30): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int>' instance creation
Capture of variable 'i'
(31): ReSharper HeapView Allocation: Closure allocation: capture of 'j' variable
(32): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int>' instance creation
Capture of variable 'j'
(33): ReSharper HeapView Allocation: Closure allocation: capture of 'i' variable and 'j' variable
(34): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int>' instance creation
Capture of variable 'i'
(35): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int>' instance creation
Capture of variable 'j'
(36): ReSharper HeapView Allocation: Delegate allocation: new 'Action' instance creation
Capture of 'this' reference
(37): ReSharper HeapView Allocation: Closure allocation: capture of 'i' variable
(38): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int>' instance creation
Capture of variable 'i'
(39): ReSharper HeapView Allocation: Closure allocation: capture of 'a' variable
(40): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int>' instance creation
Capture of variable 'a'
(41): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int>' instance creation
Capture of variable 'a'
(42): ReSharper HeapView Allocation: Closure allocation: capture of 'a' variable
(43): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int>' instance creation
Capture of variable 'a'
(44): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int>' instance creation
Capture of variable 'a'
(45): ReSharper HeapView Allocation: Closure allocation: capture of 'b' variable
(46): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int>' instance creation
Capture of variable 'b'
(47): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int>' instance creation
Capture of variable 'b'
(48): ReSharper HeapView Allocation: Closure allocation: capture of 'a' variable
(49): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int>' instance creation
Capture of variable 'a'
(50): ReSharper HeapView Allocation: Closure allocation: capture of 'c' variable, 'd' variable and containing closure ('a')
(51): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int>' instance creation
Capture of variables 'a' and 'c'
(52): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int>' instance creation
Capture of variables 'a' and 'd'
(53): ReSharper HeapView Allocation: Closure allocation: capture of 'b' variable
(54): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int>' instance creation
Capture of variable 'b'
(55): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int>' instance creation
Capture of variable 'b'
(56): ReSharper HeapView Allocation: Closure allocation: capture of 'arg' parameter
(57): ReSharper HeapView Allocation: Closure allocation: capture of 'u' parameter and containing closure ('arg')
(58): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int,int>' instance creation
Capture of parameters 'arg' and 'u'
(59): ReSharper HeapView Allocation: Closure allocation: capture of 'i' variable and 'this' reference
(60): ReSharper HeapView Allocation: Closure allocation: capture of 'j' variable and containing closure ('i', 'this')
(61): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int>' instance creation
Capture of variables ('i', 'j') and 'this' reference
(62): ReSharper HeapView Allocation: Delegate allocation: new 'Action' instance creation
Capture of 'this' reference
(63): ReSharper HeapView Allocation: Object allocation: new anonymous type instance creation for range variables {x, y}
(64): ReSharper HeapView Allocation: Object allocation: new anonymous type instance creation for range variables {{x, y}, t}
(65): ReSharper HeapView Allocation: Closure allocation: capture of 'arg' parameter, 'y' variable and 'this' reference
(66): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int>' instance creation
Capture of parameter 'arg' and 'this' reference
(67): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int,int>' instance creation
Capture of variable 'y'
Implicit capture of 'this' reference (can cause memory leaks)
(68): ReSharper HeapView Allocation: Delegate allocation: new 'Action' instance creation
Capture of 'this' reference
(69): ReSharper HeapView Allocation: Closure allocation: capture of 'value' parameter
(70): ReSharper HeapView Allocation: Delegate allocation: new 'Func<Action>' instance creation
Capture of parameter 'value'
(71): ReSharper HeapView Allocation: Closure allocation: capture of 'i' parameter and 'this' reference
(72): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int>' instance creation
Capture of parameter 'i' and 'this' reference
(73):<overlapped> ReSharper HeapView Allocation: Closure allocation: capture of 'i' parameter, 'y' variable and 'this' reference
(74): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int>' instance creation
Capture of parameter 'i' and 'this' reference
(75): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int,int>' instance creation
Capture of variable 'y'
Implicit capture of 'this' reference (can cause memory leaks)
(76): ReSharper HeapView Allocation: Closure allocation: capture of 'x' parameter
(77): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int>' instance creation
Capture of parameter 'x'
(78): ReSharper HeapView Allocation: Closure allocation: capture of 'x' parameter
(79): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int>' instance creation
Capture of parameter 'x'
(80): ReSharper HeapView Allocation: Closure allocation: capture of 'y' parameter
(81): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int>' instance creation
Capture of parameter 'y'
(82): ReSharper HeapView Allocation: Closure allocation: capture of 'x' parameter
(83): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int>' instance creation
Capture of parameter 'x'
(84): ReSharper HeapView Allocation: Closure allocation: capture of 'arg' parameter
(85): ReSharper HeapView Allocation: Object allocation: expression tree construction
(86): ReSharper HeapView Allocation: Object allocation: expression tree construction
(87): ReSharper HeapView Allocation: Object allocation: expression tree construction
(88): ReSharper HeapView Allocation: Object allocation: expression tree construction
(89): ReSharper HeapView Allocation: Object allocation: expression tree construction
(90): ReSharper HeapView Allocation: Object allocation: expression tree construction
