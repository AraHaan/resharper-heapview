using System;
using System.Collections.Generic;

[Test(
  new [] { typeof(HeapAllocations) },
  new int(), typeof(string))]
class HeapAllocations
{
  // ReSharper disable UnusedVariable
  // ReSharper disable UnusedVariable.Compiler
  // ReSharper disable InconsistentNaming

  public void M1<T, U, V>()
    where T : new()
    where U : class, new()
    where V : struct
  {
    var t0 = new int();
    var t1 = |new|(0) string('a', 100);
    var t2 = |new|(1) object();
    var t3 = |new|(2) T();
    var t4 = |new|(3) U();
    var t5 = new V();
    var t6 = |new|(4) {Foo = 123};
  }

  private static readonly int[] xs0 |= {|(5)1, 2, 3};
  private int[] xs1 |= {|(6)1, 2, 3};
  private static readonly int[] xs2 = |new|(7)[] {1, 2, 3};
  private int[] xs3 = |new|(8)[] {1, 2, 3};

  public void M2()
  {
    var ts0 = |new|(9) int[] {};
    var ts1 = |new|(10) int[0];
    var ts2 = |new|(11) int[100];
    var ts3 = |new|(12) string[] { };
    var ts4 = |new|(13)[] {1, 2, 3};
    var ts5 = |new|(14) int[2, 2];
    int[] ts6 |= {|(15)},
          ts7 |= {|(16)1,2,3};
  }

  public void M3()
  {
    P0();
    P0(|1|(17), 2);
    P0(|1|(18), 2, 3);
    P0(null); // nothing
    P0(xs2); // nothing
    P1(1, "abc");
    P1(1, "abc", |1|(19));
    P1(1, "abc", xs0); // nothing
    P1(1, "abc", null); // nothing
    P2(null); // nothing
    P2(|null|(20), null);
    P3<int>(xs0); // nothing
  }

  public void M4()
  {
    var ts0 = |I0|(21)();
    var ts1 = |I1|(22);
    I1 = null; // nothing
  }

  public void M5()
  {
    var xs = |new|(23) List<int>();
    IList<int> ys = xs;

    foreach (var i in xs) { }
    foreach (var i |in|(24) ys) { }
  }

  public void M6(string s, int i)
  {
    GC.KeepAlive("aa" + "bb");
    const string bb = "bb";
    GC.KeepAlive("aa" + bb);
    GC.KeepAlive("aa" + null);
    GC.KeepAlive(null + "bb");
    GC.KeepAlive("bb" |+|(25) s);
    GC.KeepAlive("bb" |+|(26) s + s);
    GC.KeepAlive("bb" |+|(27) s + s + s);
    GC.KeepAlive(string.Concat(|"bb"|(28), s, s, s, s));
    GC.KeepAlive("bb" |+|(29) s + s + s + s);
    GC.KeepAlive("bb" |+|(30) s + ("bb" + "cvcv" + s) + s);
    GC.KeepAlive("bb" |+|(31) s + s + s + s + s);
    GC.KeepAlive("bb" |+|(32) s + s + (s + s + s));
    GC.KeepAlive("bb" + (s |+|(33) s) + s + (s + s));
    GC.KeepAlive("aa" |+|(34) |i|(35));
    GC.KeepAlive(|i|(36) |+|(37) "aa");

    string t = "asas";
    t |+=|(38) "sdsdsd";
    t |+=|(39) "sdsdsd";

    s |+=|(40) "aaa";
    s |+=|(41) "bb";

    GC.KeepAlive(t |+|(42) s);
  }

  private static void P0(params int[] xs) { }
  private static void P1(int a, string b, params int[] xs) { }
  private static void P2(params string[] xs) { }
  private static void P3<T>(params T[] xs) { }

  private IEnumerable<int> I0() { yield break; }
  private IEnumerable<int> I1 { get { yield break; } set { } }
}

class TestAttribute : Attribute
{
  public TestAttribute(Type[] xs, int a, params Type[] ys) { }
}
---------------------------------------------------------
(0): ReSharper HeapView Allocation: Object allocation: new 'string' instance creation
(1): ReSharper HeapView Allocation: Object allocation: new 'object' instance creation
(2): ReSharper HeapView Allocation: Possible object allocation: new instance creation if 'T' type parameter will be substituted with the reference type
(3): ReSharper HeapView Allocation: Object allocation: new 'U' instance creation
(4): ReSharper HeapView Allocation: Object allocation: new anonymous type instance creation
(5): ReSharper HeapView Allocation: Object allocation: new 'int[]' array instance creation
(6): ReSharper HeapView Allocation: Object allocation: new 'int[]' array instance creation
(7): ReSharper HeapView Allocation: Object allocation: new 'int[]' array instance creation
(8): ReSharper HeapView Allocation: Object allocation: new 'int[]' array instance creation
(9): ReSharper HeapView Allocation: Object allocation: new 'int[]' array instance creation
(10):<overlapped> ReSharper HeapView Allocation: Object allocation: new 'int[]' array instance creation
(11): ReSharper HeapView Allocation: Object allocation: new 'int[]' array instance creation
(12): ReSharper HeapView Allocation: Object allocation: new 'string[]' array instance creation
(13): ReSharper HeapView Allocation: Object allocation: new 'int[]' array instance creation
(14): ReSharper HeapView Allocation: Object allocation: new 'int[,]' array instance creation
(15): ReSharper HeapView Allocation: Object allocation: new 'int[]' array instance creation
(16): ReSharper HeapView Allocation: Object allocation: new 'int[]' array instance creation
(17): ReSharper HeapView Allocation: Object allocation: new 'int[]' array instance creation for params parameter 'xs'
(18): ReSharper HeapView Allocation: Object allocation: new 'int[]' array instance creation for params parameter 'xs'
(19): ReSharper HeapView Allocation: Object allocation: new 'int[]' array instance creation for params parameter 'xs'
(20): ReSharper HeapView Allocation: Object allocation: new 'string[]' array instance creation for params parameter 'xs'
(21): ReSharper HeapView Allocation: Object allocation: new 'IEnumerable<int>' instance creation on iterator method invocation
(22): ReSharper HeapView Allocation: Object allocation: new 'IEnumerable<int>' instance creation on iterator property access
(23): ReSharper HeapView Allocation: Object allocation: new 'List<int>' instance creation
(24): ReSharper HeapView Allocation: Possible object allocation: new 'IEnumerator<int>' instance creation on 'GetEnumerator()' call (except when it's cached by the implementation)
(25): ReSharper HeapView Allocation: Object allocation: string concatenation
(26): ReSharper HeapView Allocation: Object allocation: string concatenation (3 operands)
(27): ReSharper HeapView Allocation: Object allocation: string concatenation (4 operands, allocates parameter array)
(28): ReSharper HeapView Allocation: Object allocation: new 'string[]' array instance creation for params parameter 'values'
(29): ReSharper HeapView Allocation: Object allocation: string concatenation (5 operands, allocates parameter array)
(30): ReSharper HeapView Allocation: Object allocation: string concatenation (5 operands, allocates parameter array)
(31): ReSharper HeapView Allocation: Object allocation: string concatenation (6 operands, allocates parameter array)
(32): ReSharper HeapView Allocation: Object allocation: string concatenation (6 operands, allocates parameter array)
(33): ReSharper HeapView Allocation: Object allocation: string concatenation (6 operands, allocates parameter array)
(34): ReSharper HeapView Allocation: Object allocation: string concatenation
(35): ReSharper HeapView Allocation: Object allocation: implicit 'ToString' invocation over 'int' value
(36): ReSharper HeapView Allocation: Object allocation: implicit 'ToString' invocation over 'int' value
(37): ReSharper HeapView Allocation: Object allocation: string concatenation
(38): ReSharper HeapView Allocation: Object allocation: string concatenation
(39): ReSharper HeapView Allocation: Object allocation: string concatenation
(40): ReSharper HeapView Allocation: Object allocation: string concatenation
(41): ReSharper HeapView Allocation: Object allocation: string concatenation
(42): ReSharper HeapView Allocation: Object allocation: string concatenation
