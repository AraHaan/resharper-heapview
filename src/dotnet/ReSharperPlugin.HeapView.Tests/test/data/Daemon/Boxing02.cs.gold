// ReSharper disable ReturnValueOfPureMethodIsNotUsed
// ReSharper disable CheckNamespace
// ReSharper disable UnusedVariable
// ReSharper disable UnusedParameter.Global
// ReSharper disable ConvertToConstant.Local
// ReSharper disable UnusedMember.Local
// ReSharper disable RedundantBaseQualifier
// ReSharper disable RedundantThisQualifier
// ReSharper disable EqualExpressionComparison
using System;
#pragma warning disable 659

public enum E { C }
public interface I { void InstanceMethod(); }

public struct S : I {
  public void InstanceMethod() { }
  private static void StaticMethod() { }

  public override int GetHashCode() {
    var box = base.|GetHashCode|(0)(); // boxing

    Action f = ||InstanceMethod|(1)|(2), g = StaticMethod;
    Func<int>
      g1 = |base|(3).|GetHashCode|(4),
      g2 = ||GetHashCode|(5)|(6);

    return |new|(7)[] {
      base.|ToString|(8)(),
      |ToString|(9)()
    }.Length;
  }
}

public static class Extensions {
  public static void ExtensionMethod(this I i) { }
}

public static class A {
  private static void ConcreteTypesWithoutOverrides(S s, E e, S? n) {
    var str = "aa" |+|(10) |s|(11) + 'a';
    object o1 = |s|(12), o2 = |n|(13);
    ValueType v1 = |s|(14), v2 = |n|(15);
    Enum y1 = |e|(16), y2 = |(E?) e|(17);
    I i1 = |s|(18), i2 = |(S?) s|(19);

    Action f = |s|(20).|InstanceMethod|(21);
    Func<int> g = |e|(22).|GetHashCode|(23);

    |s|(24).ExtensionMethod();
    |n|(25).ExtensionMethod();
    s.|Equals|(26)(null);
    n.|Equals|(27)(null);
    s.|GetType|(28)();
    n.GetValueOrDefault();

    e.|ToString|(29)();
    e.|GetHashCode|(30)(); // fixed in CoreCLR
    e.|Equals|(31)(|e|(32));

    // no boxing
    s.InstanceMethod();
    n?.InstanceMethod();
    s.GetHashCode();
  }

  private static void Struct<TStruct>(TStruct s) where TStruct : struct, I {
    object o1 = |s|(33), o2 = |(TStruct?) s|(34);
    ValueType v1 = |s|(35), v2 = |(TStruct?) s|(36);
    I i1 = |s|(37), i2 = |(TStruct?) s|(38);

    // always
    Action f = |s|(39).|InstanceMethod|(40);
    |s|(41).ExtensionMethod();
    s.|GetType|(42)();

    // possible
    s.|GetHashCode|(43)();
    s.|ToString|(44)();
    s.|Equals|(45)(null);

    // no boxing
    s.InstanceMethod();
  }

  private static void Unmanaged<TUnmanaged>(TUnmanaged u) where TUnmanaged : unmanaged, I {
    object o1 = |u|(46), o2 = |(TUnmanaged?) u|(47);
    ValueType v1 = |u|(48), v2 = |(TUnmanaged?) u|(49);
    I i1 = |u|(50), i2 = |(TUnmanaged?) u|(51);

    // always
    Action f = |u|(52).|InstanceMethod|(53);
    |u|(54).ExtensionMethod();
    u.|GetType|(55)();

    // possible
    u.|GetHashCode|(56)();
    u.|ToString|(57)();
    u.|Equals|(58)(null);

    // no boxing
    u.InstanceMethod();
  }

  private static void Nullable<TNullable>(TNullable? n) where TNullable : struct, I {
    object o1 = |n|(59);
    ValueType v1 = |n|(60);
    I i1 = |n|(61);

    // always
    Func<int> f = |n|(62).|GetHashCode|(63);
    |n|(64).ExtensionMethod(); // boxing!
    n.|GetType|(65)();

    // possible boxing INSIDE Nullable<T>
    n.|GetHashCode|(66)();
    n.|ToString|(67)();
    n.|Equals|(68)(null);

    // no boxing
    n?.InstanceMethod();
  }

  private static void Reference<TReferenceType>(TReferenceType r) where TReferenceType : class, I, new() {
    object o1 = r;
    I i1 = r;

    Action f = r.|InstanceMethod|(69);
    r.ExtensionMethod();
    r.GetType();

    // no boxing
    r.GetHashCode();
    r.ToString();
    r.Equals(null);

    // no boxing
    r.InstanceMethod();
  }

  private static void Unconstrained<TUnconstrained>(TUnconstrained u) where TUnconstrained : I, new() {
    object o1 = |u|(70);
    I i1 = |u|(71);

    Action f = |u|(72).|InstanceMethod|(73);
    |u|(74).ExtensionMethod();
    u.|GetType|(75)();

    // possible
    u.|GetHashCode|(76)();
    u.|ToString|(77)();
    u.|Equals|(78)(null);

    // no boxing
    u.InstanceMethod();
  }
}
---------------------------------------------------------
(0):<overlapped> ReSharper HeapView Boxing: Boxing allocation: inherited 'ValueType.GetHashCode()' virtual method invocation over the value type instance
(1):<overlapped> ReSharper HeapView Boxing: Boxing allocation: conversion of value type 'S' instance method to 'Action' delegate type
(2): ReSharper HeapView Allocation: Delegate allocation: new 'Action' instance creation
(3): ReSharper HeapView Boxing: Boxing allocation: conversion of value type 'S' instance method to 'Func<int>' delegate type
(4):<overlapped> ReSharper HeapView Allocation: Delegate allocation: new 'Func<int>' instance creation
(5):<overlapped> ReSharper HeapView Boxing: Boxing allocation: conversion of value type 'S' instance method to 'Func<int>' delegate type
(6): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int>' instance creation
(7): ReSharper HeapView Allocation: Object allocation: new 'string[]' array instance creation
(8): ReSharper HeapView Boxing: Boxing allocation: inherited 'ValueType.ToString()' virtual method invocation over the value type instance
(9): ReSharper HeapView Boxing: Boxing allocation: inherited 'ValueType.ToString()' virtual method invocation over the value type instance
(10): ReSharper HeapView Allocation: Object allocation: string concatenation (3 operands)
(11): ReSharper HeapView Boxing: Boxing allocation: inherited 'ValueType.ToString' virtual method invocation over the value type instance
(12): ReSharper HeapView Boxing: Boxing allocation: conversion from 'S' to 'object' requires boxing of the value type
(13): ReSharper HeapView Boxing: Boxing allocation: conversion from 'S?' to 'object' requires boxing of the value type
(14): ReSharper HeapView Boxing: Boxing allocation: conversion from 'S' to 'ValueType' requires boxing of the value type
(15): ReSharper HeapView Boxing: Boxing allocation: conversion from 'S?' to 'ValueType' requires boxing of the value type
(16): ReSharper HeapView Boxing: Boxing allocation: conversion from 'E' to 'Enum' requires boxing of the value type
(17): ReSharper HeapView Boxing: Boxing allocation: conversion from 'E?' to 'Enum' requires boxing of the value type
(18): ReSharper HeapView Boxing: Boxing allocation: conversion from 'S' to 'I' requires boxing of the value type
(19): ReSharper HeapView Boxing: Boxing allocation: conversion from 'S?' to 'I' requires boxing of the value type
(20): ReSharper HeapView Boxing: Boxing allocation: conversion of value type 'S' instance method to 'Action' delegate type
(21): ReSharper HeapView Allocation: Delegate allocation: new 'Action' instance creation
(22): ReSharper HeapView Boxing: Boxing allocation: conversion of value type 'E' instance method to 'Func<int>' delegate type
(23): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int>' instance creation
(24): ReSharper HeapView Boxing: Boxing allocation: conversion from 'S' to 'I' requires boxing of the value type
(25): ReSharper HeapView Boxing: Boxing allocation: conversion from 'S?' to 'I' requires boxing of the value type
(26): ReSharper HeapView Boxing: Boxing allocation: inherited 'ValueType.Equals()' virtual method invocation over the value type instance
(27): ReSharper HeapView Boxing: Boxing allocation: inherited 'ValueType.Equals()' virtual method invocation over the value type instance
(28): ReSharper HeapView Boxing: Boxing allocation: special 'Object.GetType()' method invocation over the value type instance
(29): ReSharper HeapView Boxing: Boxing allocation: inherited 'Enum.ToString()' virtual method invocation over the value type instance
(30): ReSharper HeapView Boxing: Boxing allocation: inherited 'Enum.GetHashCode()' virtual method invocation over the value type instance
(31): ReSharper HeapView Boxing: Boxing allocation: inherited 'Enum.Equals()' virtual method invocation over the value type instance
(32): ReSharper HeapView Boxing: Boxing allocation: conversion from 'E' to 'object' requires boxing of the value type
(33): ReSharper HeapView Boxing: Boxing allocation: conversion from 'TStruct' to 'object' requires boxing of the value type
(34): ReSharper HeapView Boxing: Boxing allocation: conversion from 'TStruct?' to 'object' requires boxing of the value type
(35): ReSharper HeapView Boxing: Boxing allocation: conversion from 'TStruct' to 'ValueType' requires boxing of the value type
(36): ReSharper HeapView Boxing: Boxing allocation: conversion from 'TStruct?' to 'ValueType' requires boxing of the value type
(37): ReSharper HeapView Boxing: Boxing allocation: conversion from 'TStruct' to 'I' requires boxing of the value type
(38): ReSharper HeapView Boxing: Boxing allocation: conversion from 'TStruct?' to 'I' requires boxing of the value type
(39): ReSharper HeapView Boxing: Boxing allocation: conversion of value type 'TStruct' instance method to 'Action' delegate type
(40): ReSharper HeapView Allocation: Delegate allocation: new 'Action' instance creation
(41): ReSharper HeapView Boxing: Boxing allocation: conversion from 'TStruct' to 'I' requires boxing of the value type
(42): ReSharper HeapView Boxing: Boxing allocation: special 'Object.GetType()' method invocation over the value type instance
(43): ReSharper HeapView Boxing: Possible boxing allocation: inherited 'ValueType.GetHashCode()' virtual method invocation over the value type instance if 'TStruct' type parameter will be substituted with the value type that do not overrides 'GetHashCode' virtual method
(44): ReSharper HeapView Boxing: Possible boxing allocation: inherited 'ValueType.ToString()' virtual method invocation over the value type instance if 'TStruct' type parameter will be substituted with the value type that do not overrides 'ToString' virtual method
(45): ReSharper HeapView Boxing: Possible boxing allocation: inherited 'ValueType.Equals()' virtual method invocation over the value type instance if 'TStruct' type parameter will be substituted with the value type that do not overrides 'Equals' virtual method
(46): ReSharper HeapView Boxing: Boxing allocation: conversion from 'TUnmanaged' to 'object' requires boxing of the value type
(47): ReSharper HeapView Boxing: Boxing allocation: conversion from 'TUnmanaged?' to 'object' requires boxing of the value type
(48): ReSharper HeapView Boxing: Boxing allocation: conversion from 'TUnmanaged' to 'ValueType' requires boxing of the value type
(49): ReSharper HeapView Boxing: Boxing allocation: conversion from 'TUnmanaged?' to 'ValueType' requires boxing of the value type
(50): ReSharper HeapView Boxing: Boxing allocation: conversion from 'TUnmanaged' to 'I' requires boxing of the value type
(51): ReSharper HeapView Boxing: Boxing allocation: conversion from 'TUnmanaged?' to 'I' requires boxing of the value type
(52): ReSharper HeapView Boxing: Boxing allocation: conversion of value type 'TUnmanaged' instance method to 'Action' delegate type
(53): ReSharper HeapView Allocation: Delegate allocation: new 'Action' instance creation
(54): ReSharper HeapView Boxing: Boxing allocation: conversion from 'TUnmanaged' to 'I' requires boxing of the value type
(55): ReSharper HeapView Boxing: Boxing allocation: special 'Object.GetType()' method invocation over the value type instance
(56): ReSharper HeapView Boxing: Possible boxing allocation: inherited 'ValueType.GetHashCode()' virtual method invocation over the value type instance if 'TUnmanaged' type parameter will be substituted with the value type that do not overrides 'GetHashCode' virtual method
(57): ReSharper HeapView Boxing: Possible boxing allocation: inherited 'ValueType.ToString()' virtual method invocation over the value type instance if 'TUnmanaged' type parameter will be substituted with the value type that do not overrides 'ToString' virtual method
(58): ReSharper HeapView Boxing: Possible boxing allocation: inherited 'ValueType.Equals()' virtual method invocation over the value type instance if 'TUnmanaged' type parameter will be substituted with the value type that do not overrides 'Equals' virtual method
(59): ReSharper HeapView Boxing: Boxing allocation: conversion from 'TNullable?' to 'object' requires boxing of the value type
(60): ReSharper HeapView Boxing: Boxing allocation: conversion from 'TNullable?' to 'ValueType' requires boxing of the value type
(61): ReSharper HeapView Boxing: Boxing allocation: conversion from 'TNullable?' to 'I' requires boxing of the value type
(62): ReSharper HeapView Boxing: Boxing allocation: conversion of value type 'TNullable?' instance method to 'Func<int>' delegate type
(63): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int>' instance creation
(64): ReSharper HeapView Boxing: Boxing allocation: conversion from 'TNullable?' to 'I' requires boxing of the value type
(65): ReSharper HeapView Boxing: Boxing allocation: special 'Object.GetType()' method invocation over the value type instance
(66): ReSharper HeapView Boxing: Possible boxing allocation: inherited 'ValueType.GetHashCode()' virtual method invocation over the value type instance if 'TNullable' type parameter will be substituted with the value type that do not overrides 'GetHashCode' virtual method
(67): ReSharper HeapView Boxing: Possible boxing allocation: inherited 'ValueType.ToString()' virtual method invocation over the value type instance if 'TNullable' type parameter will be substituted with the value type that do not overrides 'ToString' virtual method
(68): ReSharper HeapView Boxing: Possible boxing allocation: inherited 'ValueType.Equals()' virtual method invocation over the value type instance if 'TNullable' type parameter will be substituted with the value type that do not overrides 'Equals' virtual method
(69): ReSharper HeapView Allocation: Delegate allocation: new 'Action' instance creation
(70): ReSharper HeapView Boxing: Possible boxing allocation: conversion from 'TUnconstrained' to 'object' possibly requires boxing of the value type
(71): ReSharper HeapView Boxing: Possible boxing allocation: conversion from 'TUnconstrained' to 'I' possibly requires boxing of the value type
(72): ReSharper HeapView Boxing: Possible boxing allocation: conversion of value type 'TUnconstrained' instance method to 'Action' delegate type if 'TUnconstrained' type parameter will be substituted with the value type
(73): ReSharper HeapView Allocation: Delegate allocation: new 'Action' instance creation
(74): ReSharper HeapView Boxing: Possible boxing allocation: conversion from 'TUnconstrained' to 'I' possibly requires boxing of the value type
(75): ReSharper HeapView Boxing: Possible boxing allocation: special 'Object.GetType()' method may be invoked over the value type instance if 'TUnconstrained' type parameter will be substituted with the value type
(76): ReSharper HeapView Boxing: Possible boxing allocation: inherited 'Object.GetHashCode()' virtual method invocation over the value type instance if 'TUnconstrained' type parameter will be substituted with the value type that do not overrides 'GetHashCode' virtual method
(77): ReSharper HeapView Boxing: Possible boxing allocation: inherited 'Object.ToString()' virtual method invocation over the value type instance if 'TUnconstrained' type parameter will be substituted with the value type that do not overrides 'ToString' virtual method
(78): ReSharper HeapView Boxing: Possible boxing allocation: inherited 'Object.Equals()' virtual method invocation over the value type instance if 'TUnconstrained' type parameter will be substituted with the value type that do not overrides 'Equals' virtual method
