// ReSharper disable ReturnValueOfPureMethodIsNotUsed
// ReSharper disable CheckNamespace
// ReSharper disable UnusedVariable
// ReSharper disable UnusedParameter.Global
// ReSharper disable ConvertToConstant.Local
// ReSharper disable UnusedMember.Local
// ReSharper disable RedundantBaseQualifier
// ReSharper disable RedundantThisQualifier
// ReSharper disable EqualExpressionComparison
using System;
#pragma warning disable 659

public enum E { C }
public interface I { void InstanceMethod(); }

public struct S : I {
  public void InstanceMethod() { }
  private static void StaticMethod() { }

  public override int GetHashCode() {
    var box = base.|GetHashCode|(0)(); // boxing

    Action f = ||InstanceMethod|(1)|(2), g = |StaticMethod|(3);
    Func<int>
      g1 = |base|(4).|GetHashCode|(5),
      g2 = ||GetHashCode|(6)|(7);

    return |new|(8)[] {
      base.|ToString|(9)(),
      |ToString|(10)()
    }.Length;
  }
}

public static class Extensions {
  public static void ExtensionMethod(this I i) { }
}

public static class A {
  private static void ConcreteTypesWithoutOverrides(S s, E e, S? n) {
    var str = "aa" |+|(11) |s|(12) + 'a';
    object o1 = |s|(13), o2 = |n|(14);
    ValueType v1 = |s|(15), v2 = |n|(16);
    Enum y1 = |e|(17), y2 = |(E?) e|(18);
    I i1 = |s|(19), i2 = |(S?) s|(20);

    Action f = |s|(21).|InstanceMethod|(22);
    Func<int> g = |e|(23).|GetHashCode|(24);

    |s|(25).ExtensionMethod();
    |n|(26).ExtensionMethod();
    s.|Equals|(27)(null);
    n.|Equals|(28)(null);
    s.|GetType|(29)();
    n.GetValueOrDefault();

    e.|ToString|(30)();
    e.|GetHashCode|(31)(); // fixed in CoreCLR
    e.|Equals|(32)(|e|(33));

    // no boxing
    s.InstanceMethod();
    n?.InstanceMethod();
    s.GetHashCode();
  }

  private static void Struct<TStruct>(TStruct s) where TStruct : struct, I {
    object o1 = |s|(34), o2 = |(TStruct?) s|(35);
    ValueType v1 = |s|(36), v2 = |(TStruct?) s|(37);
    I i1 = |s|(38), i2 = |(TStruct?) s|(39);

    // always
    Action f = |s|(40).|InstanceMethod|(41);
    |s|(42).ExtensionMethod();
    s.|GetType|(43)();

    // possible
    s.|GetHashCode|(44)();
    s.|ToString|(45)();
    s.|Equals|(46)(null);

    // no boxing
    s.InstanceMethod();
  }

  private static void Unmanaged<TUnmanaged>(TUnmanaged u) where TUnmanaged : unmanaged, I {
    object o1 = |u|(47), o2 = |(TUnmanaged?) u|(48);
    ValueType v1 = |u|(49), v2 = |(TUnmanaged?) u|(50);
    I i1 = |u|(51), i2 = |(TUnmanaged?) u|(52);

    // always
    Action f = |u|(53).|InstanceMethod|(54);
    |u|(55).ExtensionMethod();
    u.|GetType|(56)();

    // possible
    u.|GetHashCode|(57)();
    u.|ToString|(58)();
    u.|Equals|(59)(null);

    // no boxing
    u.InstanceMethod();
  }

  private static void Nullable<TNullable>(TNullable? n) where TNullable : struct, I {
    object o1 = |n|(60);
    ValueType v1 = |n|(61);
    I i1 = |n|(62);

    // always
    Func<int> f = |n|(63).|GetHashCode|(64);
    |n|(65).ExtensionMethod(); // boxing!
    n.|GetType|(66)();

    // possible boxing INSIDE Nullable<T>
    n.|GetHashCode|(67)();
    n.|ToString|(68)();
    n.|Equals|(69)(null);

    // no boxing
    n?.InstanceMethod();
  }

  private static void Reference<TReferenceType>(TReferenceType r) where TReferenceType : class, I, new() {
    object o1 = r;
    I i1 = r;

    Action f = r.|InstanceMethod|(70);
    r.ExtensionMethod();
    r.GetType();

    // no boxing
    r.GetHashCode();
    r.ToString();
    r.Equals(null);

    // no boxing
    r.InstanceMethod();
  }

  private static void Unconstrained<TUnconstrained>(TUnconstrained u) where TUnconstrained : I, new() {
    object o1 = |u|(71);
    I i1 = |u|(72);

    Action f = |u|(73).|InstanceMethod|(74);
    |u|(75).ExtensionMethod();
    u.|GetType|(76)();

    // possible
    u.|GetHashCode|(77)();
    u.|ToString|(78)();
    u.|Equals|(79)(null);

    // no boxing
    u.InstanceMethod();
  }
}
---------------------------------------------------------
(0):<overlapped> ReSharper HeapView Boxing: Boxing allocation: inherited 'ValueType.GetHashCode()' virtual method invocation over the value type instance
(1):<overlapped> ReSharper HeapView Boxing: Boxing allocation: conversion of value type 'S' instance method to 'Action' delegate type
(2): ReSharper HeapView Allocation: Delegate allocation: new 'Action' instance creation
(3): ReSharper HeapView Allocation: Delegate allocation: new 'Action' instance creation
(4): ReSharper HeapView Boxing: Boxing allocation: conversion of value type 'S' instance method to 'Func<int>' delegate type
(5):<overlapped> ReSharper HeapView Allocation: Delegate allocation: new 'Func<int>' instance creation
(6):<overlapped> ReSharper HeapView Boxing: Boxing allocation: conversion of value type 'S' instance method to 'Func<int>' delegate type
(7): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int>' instance creation
(8): ReSharper HeapView Allocation: Object allocation: new 'string[]' array instance creation
(9): ReSharper HeapView Boxing: Boxing allocation: inherited 'ValueType.ToString()' virtual method invocation over the value type instance
(10): ReSharper HeapView Boxing: Boxing allocation: inherited 'ValueType.ToString()' virtual method invocation over the value type instance
(11): ReSharper HeapView Allocation: Object allocation: string concatenation (3 operands)
(12): ReSharper HeapView Boxing: Boxing allocation: inherited 'ValueType.ToString' virtual method invocation over the value type instance
(13): ReSharper HeapView Boxing: Boxing allocation: conversion from 'S' to 'object' requires boxing of the value type
(14): ReSharper HeapView Boxing: Boxing allocation: conversion from 'S?' to 'object' requires boxing of the value type
(15): ReSharper HeapView Boxing: Boxing allocation: conversion from 'S' to 'ValueType' requires boxing of the value type
(16): ReSharper HeapView Boxing: Boxing allocation: conversion from 'S?' to 'ValueType' requires boxing of the value type
(17): ReSharper HeapView Boxing: Boxing allocation: conversion from 'E' to 'Enum' requires boxing of the value type
(18): ReSharper HeapView Boxing: Boxing allocation: conversion from 'E?' to 'Enum' requires boxing of the value type
(19): ReSharper HeapView Boxing: Boxing allocation: conversion from 'S' to 'I' requires boxing of the value type
(20): ReSharper HeapView Boxing: Boxing allocation: conversion from 'S?' to 'I' requires boxing of the value type
(21): ReSharper HeapView Boxing: Boxing allocation: conversion of value type 'S' instance method to 'Action' delegate type
(22): ReSharper HeapView Allocation: Delegate allocation: new 'Action' instance creation
(23): ReSharper HeapView Boxing: Boxing allocation: conversion of value type 'E' instance method to 'Func<int>' delegate type
(24): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int>' instance creation
(25): ReSharper HeapView Boxing: Boxing allocation: conversion from 'S' to 'I' requires boxing of the value type
(26): ReSharper HeapView Boxing: Boxing allocation: conversion from 'S?' to 'I' requires boxing of the value type
(27): ReSharper HeapView Boxing: Boxing allocation: inherited 'ValueType.Equals()' virtual method invocation over the value type instance
(28): ReSharper HeapView Boxing: Boxing allocation: inherited 'ValueType.Equals()' virtual method invocation over the value type instance
(29): ReSharper HeapView Boxing: Boxing allocation: special 'Object.GetType()' method invocation over the value type instance
(30): ReSharper HeapView Boxing: Boxing allocation: inherited 'Enum.ToString()' virtual method invocation over the value type instance
(31): ReSharper HeapView Boxing: Boxing allocation: inherited 'Enum.GetHashCode()' virtual method invocation over the value type instance
(32): ReSharper HeapView Boxing: Boxing allocation: inherited 'Enum.Equals()' virtual method invocation over the value type instance
(33): ReSharper HeapView Boxing: Boxing allocation: conversion from 'E' to 'object' requires boxing of the value type
(34): ReSharper HeapView Boxing: Boxing allocation: conversion from 'TStruct' to 'object' requires boxing of the value type
(35): ReSharper HeapView Boxing: Boxing allocation: conversion from 'TStruct?' to 'object' requires boxing of the value type
(36): ReSharper HeapView Boxing: Boxing allocation: conversion from 'TStruct' to 'ValueType' requires boxing of the value type
(37): ReSharper HeapView Boxing: Boxing allocation: conversion from 'TStruct?' to 'ValueType' requires boxing of the value type
(38): ReSharper HeapView Boxing: Boxing allocation: conversion from 'TStruct' to 'I' requires boxing of the value type
(39): ReSharper HeapView Boxing: Boxing allocation: conversion from 'TStruct?' to 'I' requires boxing of the value type
(40): ReSharper HeapView Boxing: Boxing allocation: conversion of value type 'TStruct' instance method to 'Action' delegate type
(41): ReSharper HeapView Allocation: Delegate allocation: new 'Action' instance creation
(42): ReSharper HeapView Boxing: Boxing allocation: conversion from 'TStruct' to 'I' requires boxing of the value type
(43): ReSharper HeapView Boxing: Boxing allocation: special 'Object.GetType()' method invocation over the value type instance
(44): ReSharper HeapView Boxing: Possible boxing allocation: inherited 'ValueType.GetHashCode()' virtual method invocation over the value type instance if 'TStruct' type parameter will be substituted with the value type that do not overrides 'GetHashCode' virtual method
(45): ReSharper HeapView Boxing: Possible boxing allocation: inherited 'ValueType.ToString()' virtual method invocation over the value type instance if 'TStruct' type parameter will be substituted with the value type that do not overrides 'ToString' virtual method
(46): ReSharper HeapView Boxing: Possible boxing allocation: inherited 'ValueType.Equals()' virtual method invocation over the value type instance if 'TStruct' type parameter will be substituted with the value type that do not overrides 'Equals' virtual method
(47): ReSharper HeapView Boxing: Boxing allocation: conversion from 'TUnmanaged' to 'object' requires boxing of the value type
(48): ReSharper HeapView Boxing: Boxing allocation: conversion from 'TUnmanaged?' to 'object' requires boxing of the value type
(49): ReSharper HeapView Boxing: Boxing allocation: conversion from 'TUnmanaged' to 'ValueType' requires boxing of the value type
(50): ReSharper HeapView Boxing: Boxing allocation: conversion from 'TUnmanaged?' to 'ValueType' requires boxing of the value type
(51): ReSharper HeapView Boxing: Boxing allocation: conversion from 'TUnmanaged' to 'I' requires boxing of the value type
(52): ReSharper HeapView Boxing: Boxing allocation: conversion from 'TUnmanaged?' to 'I' requires boxing of the value type
(53): ReSharper HeapView Boxing: Boxing allocation: conversion of value type 'TUnmanaged' instance method to 'Action' delegate type
(54): ReSharper HeapView Allocation: Delegate allocation: new 'Action' instance creation
(55): ReSharper HeapView Boxing: Boxing allocation: conversion from 'TUnmanaged' to 'I' requires boxing of the value type
(56): ReSharper HeapView Boxing: Boxing allocation: special 'Object.GetType()' method invocation over the value type instance
(57): ReSharper HeapView Boxing: Possible boxing allocation: inherited 'ValueType.GetHashCode()' virtual method invocation over the value type instance if 'TUnmanaged' type parameter will be substituted with the value type that do not overrides 'GetHashCode' virtual method
(58): ReSharper HeapView Boxing: Possible boxing allocation: inherited 'ValueType.ToString()' virtual method invocation over the value type instance if 'TUnmanaged' type parameter will be substituted with the value type that do not overrides 'ToString' virtual method
(59): ReSharper HeapView Boxing: Possible boxing allocation: inherited 'ValueType.Equals()' virtual method invocation over the value type instance if 'TUnmanaged' type parameter will be substituted with the value type that do not overrides 'Equals' virtual method
(60): ReSharper HeapView Boxing: Boxing allocation: conversion from 'TNullable?' to 'object' requires boxing of the value type
(61): ReSharper HeapView Boxing: Boxing allocation: conversion from 'TNullable?' to 'ValueType' requires boxing of the value type
(62): ReSharper HeapView Boxing: Boxing allocation: conversion from 'TNullable?' to 'I' requires boxing of the value type
(63): ReSharper HeapView Boxing: Boxing allocation: conversion of value type 'TNullable?' instance method to 'Func<int>' delegate type
(64): ReSharper HeapView Allocation: Delegate allocation: new 'Func<int>' instance creation
(65): ReSharper HeapView Boxing: Boxing allocation: conversion from 'TNullable?' to 'I' requires boxing of the value type
(66): ReSharper HeapView Boxing: Boxing allocation: special 'Object.GetType()' method invocation over the value type instance
(67): ReSharper HeapView Boxing: Possible boxing allocation: inherited 'ValueType.GetHashCode()' virtual method invocation over the value type instance if 'TNullable' type parameter will be substituted with the value type that do not overrides 'GetHashCode' virtual method
(68): ReSharper HeapView Boxing: Possible boxing allocation: inherited 'ValueType.ToString()' virtual method invocation over the value type instance if 'TNullable' type parameter will be substituted with the value type that do not overrides 'ToString' virtual method
(69): ReSharper HeapView Boxing: Possible boxing allocation: inherited 'ValueType.Equals()' virtual method invocation over the value type instance if 'TNullable' type parameter will be substituted with the value type that do not overrides 'Equals' virtual method
(70): ReSharper HeapView Allocation: Delegate allocation: new 'Action' instance creation
(71): ReSharper HeapView Boxing: Possible boxing allocation: conversion from 'TUnconstrained' to 'object' possibly requires boxing of the value type
(72): ReSharper HeapView Boxing: Possible boxing allocation: conversion from 'TUnconstrained' to 'I' possibly requires boxing of the value type
(73): ReSharper HeapView Boxing: Possible boxing allocation: conversion of value type 'TUnconstrained' instance method to 'Action' delegate type if 'TUnconstrained' type parameter will be substituted with the value type
(74): ReSharper HeapView Allocation: Delegate allocation: new 'Action' instance creation
(75): ReSharper HeapView Boxing: Possible boxing allocation: conversion from 'TUnconstrained' to 'I' possibly requires boxing of the value type
(76): ReSharper HeapView Boxing: Possible boxing allocation: special 'Object.GetType()' method may be invoked over the value type instance if 'TUnconstrained' type parameter will be substituted with the value type
(77): ReSharper HeapView Boxing: Possible boxing allocation: inherited 'Object.GetHashCode()' virtual method invocation over the value type instance if 'TUnconstrained' type parameter will be substituted with the value type that do not overrides 'GetHashCode' virtual method
(78): ReSharper HeapView Boxing: Possible boxing allocation: inherited 'Object.ToString()' virtual method invocation over the value type instance if 'TUnconstrained' type parameter will be substituted with the value type that do not overrides 'ToString' virtual method
(79): ReSharper HeapView Boxing: Possible boxing allocation: inherited 'Object.Equals()' virtual method invocation over the value type instance if 'TUnconstrained' type parameter will be substituted with the value type that do not overrides 'Equals' virtual method
