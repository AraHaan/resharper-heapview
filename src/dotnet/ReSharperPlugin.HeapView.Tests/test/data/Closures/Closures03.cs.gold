method 'Ordinary'
> display classes: 2
  class #0: '{       var local2 = "local2";     ...'
    members: local variable 'local2', parent display class #1
    closures: 1
      lambda expr  '() => local2 + local'
        captures: local variable 'local2', local variable 'local'
  class #1: '{     var local = "local";     cons...'
    members: local variable 'local'
    closures: 1
      lambda expr  '() => {       var local2 = "local2";...'
        captures: local variable 'local'
> captureless: 0
method 'Unsafe'
> display classes: 2
  class #0: '{     ref var refLocal = ref array[0...'
    members: local variable 'refLocal'
    closures: 1
      lambda expr  '() => refLocal.ToString()'
        captures: local variable 'refLocal'
  class #1: 'fixed (int* ptr = &array[0]) {      ...'
    members: local variable 'ptr'
    closures: 1
      lambda expr  '() => ptr->ToString()'
        captures: local variable 'ptr'
> captureless: 0
method 'Catch'
> display classes: 1
  class #0: 'catch (Exception exception) when (Dec...'
    members: local variable 'outVar', local variable 'exception'
    closures: 2
      lambda expr  '() => outVar'
        captures: local variable 'outVar'
      lambda expr  '() => exception.ToString()'
        captures: local variable 'exception'
> captureless: 0
method 'OutVars'
> display classes: 11
  class #0: '{     DeclaresVar(out var statement)...'
    members: local variable 'statement', local variable 'declarationStatement'
    closures: 1
      lambda expr  '() => statement + declarationStatement'
        captures: local variable 'statement', local variable 'declarationStatement'
  class #1: 'do { }     while (DeclaresVar(out va...'
    members: local variable 'doVariable'
    closures: 1
      lambda expr  '() => doVariable'
        captures: local variable 'doVariable'
  class #2: 'foreach ((var iterator1, var (iterato...'
    members: local variable 'iterator1', local variable 'iterator2', local variable 'foreachCollection'
    closures: 1
      lambda expr  '() => iterator1 + iterator2 + foreach...'
        captures: local variable 'iterator1', local variable 'iterator2', local variable 'foreachCollection'
  class #3: 'for (DeclaresVar(out var forInitializ...'
    members: local variable 'forInitializer', local variable 'forCondition'
    closures: 2
      lambda expr  '() => forInitializer'
        captures: local variable 'forInitializer'
      lambda expr  '() => forInitializer + forCondition'
        captures: local variable 'forInitializer', local variable 'forCondition'
  class #4: 'DeclaresVar(out var forIterator), F((...'
    members: local variable 'forIterator'
    closures: 1
      lambda expr  '() => forIterator'
        captures: local variable 'forIterator'
  class #5: '() => DeclaresVar(out var lambdaVar) ...'
    members: local variable 'lambdaVar'
    closures: 1
      lambda expr  '() => lambdaVar'
        captures: local variable 'lambdaVar'
  class #6: '=> DeclaresVar(out var localFuncVar) ...'
    members: local variable 'localFuncVar'
    closures: 1
      lambda expr  '() => localFuncVar'
        captures: local variable 'localFuncVar'
  class #7: 'case string caseVar when DeclaresVar(...'
    members: local variable 'switchSection', local variable 'caseVar', local variable 'line1'
    closures: 2
      lambda expr  '() => switchSection + caseVar'
        captures: local variable 'switchSection', local variable 'caseVar'
      lambda expr  '() => line1'
        captures: local variable 'line1'
  class #8: 'case string caseVar2:         var li...'
    members: local variable 'caseVar2', local variable 'line2'
    closures: 1
      lambda expr  '() => caseVar2 + line2'
        captures: local variable 'caseVar2', local variable 'line2'
  class #9: 'string armVar => DeclaresVar(out var ...'
    members: local variable 'armOutVar', local variable 'armVar'
    closures: 1
      lambda expr  '() => armOutVar + armVar'
        captures: local variable 'armOutVar', local variable 'armVar'
  class #10: 'for (var forVariable = DeclaresVar(ou...'
    members: local variable 'forInitializer', local variable 'forVariable'
    closures: 3
      lambda expr  '() => forInitializer'
        captures: local variable 'forInitializer'
      lambda expr  '() => forVariable + forInitializer'
        captures: local variable 'forVariable', local variable 'forInitializer'
      lambda expr  '() => forVariable + forInitializer'
        captures: local variable 'forVariable', local variable 'forInitializer'
> captureless: 3
  lambda expr  'x => ("aa", ("bb", "cc"))'
  lambda expr  '() => DeclaresVar(out var lambdaVar) ...'
  local func   'bool LocalFunc() => DeclaresVar(out v...'
constructor 'SomeClass'
> display classes: 1
  class #0: 'public SomeClass()     : this(out va...'
    members: local variable 'ctorInitializer'
    closures: 1
      lambda expr  '() => ctorInitializer'
        captures: local variable 'ctorInitializer'
> captureless: 0
method 'EmbeddedScope'
> display classes: 7
  class #0: 'if (DeclaresVar(out var ifEmbedded) &...'
    members: local variable 'ifEmbedded'
    closures: 1
      lambda expr  '() => ifEmbedded'
        captures: local variable 'ifEmbedded'
  class #1: '_ = DeclaresVar(out var expressionEmb...'
    members: local variable 'expressionEmbedded'
    closures: 1
      lambda expr  '() => expressionEmbedded'
        captures: local variable 'expressionEmbedded'
  class #2: 'switch (DeclaresVar(out var switchEmb...'
    members: local variable 'switchEmbedded'
    closures: 1
      lambda expr  '() => switchEmbedded'
        captures: local variable 'switchEmbedded'
  class #3: 'throw new MyException(DeclaresVar(out...'
    members: local variable 'throwStandalone'
    closures: 1
      lambda expr  '() => throwStandalone'
        captures: local variable 'throwStandalone'
  class #4: '{       if (flag)         throw new...'
    members: local variable 'throwEmbedded'
    closures: 1
      lambda expr  '() => throwEmbedded'
        captures: local variable 'throwEmbedded'
  class #5: 'return DeclaresVar(out var returnEmbe...'
    members: local variable 'returnEmbedded'
    closures: 1
      lambda expr  '() => returnEmbedded'
        captures: local variable 'returnEmbedded'
  class #6: '{     if (flag)       if (DeclaresV...'
    members: local variable 'ifStandalone', local variable 'expressionStandalone', local variable 'switchStandalone', local variable 'returnStandalone'
    closures: 4
      lambda expr  '() => ifStandalone'
        captures: local variable 'ifStandalone'
      lambda expr  '() => expressionStandalone'
        captures: local variable 'expressionStandalone'
      lambda expr  '() => switchStandalone'
        captures: local variable 'switchStandalone'
      lambda expr  '() => returnStandalone'
        captures: local variable 'returnStandalone'
> captureless: 0
