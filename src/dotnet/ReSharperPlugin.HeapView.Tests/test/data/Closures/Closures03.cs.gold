method 'Ordinary'
> display classes: 2
    display class #0: '{       var local2 = "local2";     ...'
       captures: local variable 'local2'
    display class #1: '{     var local = "local";     cons...'
       captures: local variable 'local'
> captures: 2
    lambda expr  '() => local2 + local'
       captures: local variable 'local2', local variable 'local'
    lambda expr  '() => {       var local2 = "local2";...'
       captures: local variable 'local'
> captureless: 0
method 'Unsafe'
> display classes: 2
    display class #0: '{     ref var refLocal = ref array[0...'
       captures: local variable 'refLocal'
    display class #1: 'fixed (int* ptr = &array[0]) {      ...'
       captures: local variable 'ptr'
> captures: 2
    lambda expr  '() => refLocal.ToString()'
       captures: local variable 'refLocal'
    lambda expr  '() => ptr->ToString()'
       captures: local variable 'ptr'
> captureless: 0
method 'Catch'
> display classes: 1
    display class #0: 'catch (Exception exception) when (Dec...'
       captures: local variable 'outVar', local variable 'exception'
> captures: 2
    lambda expr  '() => outVar'
       captures: local variable 'outVar'
    lambda expr  '() => exception.ToString()'
       captures: local variable 'exception'
> captureless: 0
method 'OutVars'
> display classes: 11
    display class #0: '{     DeclaresVar(out var statement)...'
       captures: local variable 'statement', local variable 'declarationStatement'
    display class #1: 'do { }     while (DeclaresVar(out va...'
       captures: local variable 'doVariable'
    display class #2: 'foreach ((var iterator1, var (iterato...'
       captures: local variable 'iterator1', local variable 'iterator2', local variable 'foreachCollection'
    display class #3: 'for (DeclaresVar(out var forInitializ...'
       captures: local variable 'forInitializer', local variable 'forCondition'
    display class #4: 'DeclaresVar(out var forIterator), F((...'
       captures: local variable 'forIterator'
    display class #5: '() => DeclaresVar(out var lambdaVar) ...'
       captures: local variable 'lambdaVar'
    display class #6: '=> DeclaresVar(out var localFuncVar) ...'
       captures: local variable 'localFuncVar'
    display class #7: 'case string caseVar when DeclaresVar(...'
       captures: local variable 'switchSection', local variable 'caseVar', local variable 'line1'
    display class #8: 'case string caseVar2:         var li...'
       captures: local variable 'caseVar2', local variable 'line2'
    display class #9: 'string armVar => DeclaresVar(out var ...'
       captures: local variable 'armOutVar', local variable 'armVar'
    display class #10: 'for (var forVariable = DeclaresVar(ou...'
       captures: local variable 'forInitializer', local variable 'forVariable'
> captures: 15
    lambda expr  '() => statement + declarationStatement'
       captures: local variable 'statement', local variable 'declarationStatement'
    lambda expr  '() => doVariable'
       captures: local variable 'doVariable'
    lambda expr  '() => iterator1 + iterator2 + foreach...'
       captures: local variable 'iterator1', local variable 'iterator2', local variable 'foreachCollection'
    lambda expr  '() => forInitializer'
       captures: local variable 'forInitializer'
    lambda expr  '() => forIterator'
       captures: local variable 'forIterator'
    lambda expr  '() => forInitializer + forCondition'
       captures: local variable 'forInitializer', local variable 'forCondition'
    lambda expr  '() => lambdaVar'
       captures: local variable 'lambdaVar'
    lambda expr  '() => localFuncVar'
       captures: local variable 'localFuncVar'
    lambda expr  '() => switchSection + caseVar'
       captures: local variable 'switchSection', local variable 'caseVar'
    lambda expr  '() => line1'
       captures: local variable 'line1'
    lambda expr  '() => caseVar2 + line2'
       captures: local variable 'caseVar2', local variable 'line2'
    lambda expr  '() => armOutVar + armVar'
       captures: local variable 'armOutVar', local variable 'armVar'
    lambda expr  '() => forInitializer'
       captures: local variable 'forInitializer'
    lambda expr  '() => forVariable + forInitializer'
       captures: local variable 'forVariable', local variable 'forInitializer'
    lambda expr  '() => forVariable + forInitializer'
       captures: local variable 'forVariable', local variable 'forInitializer'
> captureless: 3
  lambda expr  'x => ("aa", ("bb", "cc"))'
  lambda expr  '() => DeclaresVar(out var lambdaVar) ...'
  local func   'bool LocalFunc() => DeclaresVar(out v...'
constructor 'SomeClass'
> display classes: 0
> captures: 0
> captureless: 0
constructor 'SomeClass'
> display classes: 1
    display class #0: 'public SomeClass()     : this(out va...'
       captures: local variable 'ctorInitializer'
> captures: 1
    lambda expr  '() => ctorInitializer'
       captures: local variable 'ctorInitializer'
> captureless: 0
method 'EmbeddedScope'
> display classes: 7
    display class #0: 'if (DeclaresVar(out var ifEmbedded) &...'
       captures: local variable 'ifEmbedded'
    display class #1: '_ = DeclaresVar(out var expressionEmb...'
       captures: local variable 'expressionEmbedded'
    display class #2: 'switch (DeclaresVar(out var switchEmb...'
       captures: local variable 'switchEmbedded'
    display class #3: 'throw new MyException(DeclaresVar(out...'
       captures: local variable 'throwStandalone'
    display class #4: '{       if (flag)         throw new...'
       captures: local variable 'throwEmbedded'
    display class #5: 'return DeclaresVar(out var returnEmbe...'
       captures: local variable 'returnEmbedded'
    display class #6: '{     if (flag)       if (DeclaresV...'
       captures: local variable 'ifStandalone', local variable 'expressionStandalone', local variable 'switchStandalone', local variable 'returnStandalone'
> captures: 10
    lambda expr  '() => ifEmbedded'
       captures: local variable 'ifEmbedded'
    lambda expr  '() => expressionEmbedded'
       captures: local variable 'expressionEmbedded'
    lambda expr  '() => switchEmbedded'
       captures: local variable 'switchEmbedded'
    lambda expr  '() => throwStandalone'
       captures: local variable 'throwStandalone'
    lambda expr  '() => throwEmbedded'
       captures: local variable 'throwEmbedded'
    lambda expr  '() => returnEmbedded'
       captures: local variable 'returnEmbedded'
    lambda expr  '() => ifStandalone'
       captures: local variable 'ifStandalone'
    lambda expr  '() => expressionStandalone'
       captures: local variable 'expressionStandalone'
    lambda expr  '() => switchStandalone'
       captures: local variable 'switchStandalone'
    lambda expr  '() => returnStandalone'
       captures: local variable 'returnStandalone'
> captureless: 0
method 'F'
> display classes: 0
> captures: 0
> captureless: 0
method 'C'
> display classes: 0
> captures: 0
> captureless: 0
constructor 'MyException'
> display classes: 0
> captures: 0
> captureless: 0
